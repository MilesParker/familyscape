package edu.brook;

/**
 * Demographic Prisoner_s Dilemma Java Implementation.
 * 
 * Generated by metaabm system: Mar 6, 2009 1:43:17 PM PST in project: edu.brook.parent.escape  */

public class DemographicPrisonersDilemma extends org.ascape.model.Scape
		implements
			org.metaabm.mee.ui.providers.ModelFactoryProvider {

	/**
	 * The number of players to create.
	 */

	private int playerCount = 100;
	/**
	 * 
	 */

	private int minimumWealth = 20;
	/**
	 * 
	 */

	private int maximumWealth = 100;
	/**
	 * 
	 */

	private int maximumAge = 100;
	/**
	 * The change in wealth for a player when playing cooperate against cooperate.
	 */

	private int payoffCC = 2;
	/**
	 * The change in wealth for a player when playing cooperate against defect.
	 */

	private int payoffCD = -6;
	/**
	 * The change in wealth for a player when playing defect against cooperate.
	 */

	private int payoffDC = 6;
	/**
	 * The change in wealth for a player when both players defect.
	 */

	private int payoffDD = -5;
	/**
	 * The wealth level at which an agent can fission.
	 */

	private int fissionWealth = 11;
	/**
	 * The wealth that is passed from parent to child.
	 */

	private int inheiritedWealth = 6;
	/**
	 * The wealth initially assigned to an agent at the beginning of model run.
	 */

	private int initialWealth = 6;
	/**
	 * The probabaility that a given agent will change strategies in a given period, expressed as a value from 0.0 to 1.0.
	 */

	private double mutationRate = .1;
	/**
	 * The number of periods before an agent will be removed from game when Die At Age rule is active.
	 */

	private int deathAge = 100;
	/**
	 * The actual age in years as determined by data set.
	 */

	private int birthAge = 0;
	/**
	 * The size of each dimension.
	 */

	private int[] gameSpaceDimensions = new int[2];
	/**
	 * 
	 */

	private org.ascape.model.Scape gameSpace = null;

	/**
	 * 
	 */

	private org.ascape.model.Scape playerList = null;

	/**
	 * Constructs a new Demographic Prisoner_s Dilemma.
	 */

	public DemographicPrisonersDilemma() {
		createUniqueID();
		setGameSpaceWidth(20);
		setGameSpaceHeight(20);
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			DemographicPrisonersDilemma clone = (DemographicPrisonersDilemma) super
					.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}
	/**
	 * Creates the members of Demographic Prisoner_s Dilemma. 
	 */
	public void createScape() {
		super.createScape();
		Player playerProto = new Player();
		playerList = new org.ascape.model.Scape();
		playerList.setSize(playerCount);
		playerList.setName("Player");
		playerList.setPrototypeAgent(playerProto);
		playerList.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);
		gameSpace = new org.ascape.model.Scape(
				new org.ascape.model.space.Array2DVonNeumann());
		gameSpace.setPrototypeAgent(new PlayCell());
		gameSpace.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getGameSpaceDimensions()));
		gameSpace.setName("Build Grid");
		((org.ascape.model.space.CollectionSpace) gameSpace.getSpace())
				.setPeriodic(true);
		add(gameSpace);
		org.ascape.model.Scape playCellList = gameSpace;

		add(playerList);
		playerProto.setHostScape(gameSpace);
		gameSpace.getRules().clear();

		playerList.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
				"Player Population") {
			private static final long serialVersionUID = 684614444640209893L;

			@SuppressWarnings("unused")
			public final boolean meetsCondition(Object object) {
				return true;
			}
		});
		playerList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Player Age") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final double getValue(Object player) {
						return ((Player) player).getAge();
					}
				});
		playerList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Player Wealth") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final double getValue(Object player) {
						return ((Player) player).getWealth();
					}
				});

		playerList.addInitialRule(new org.ascape.model.rule.Rule("Initialize") {
			private static final long serialVersionUID = 6846144446402098982L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).intializeNonFramework();
			}
		});

		playerList.addInitialRule(new org.ascape.model.rule.Rule(
				"Move To Random Location") {
			private static final long serialVersionUID = 6846144446402098982L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).moveToRandomLocation();
			}
		});
		playerList.addRule(new org.ascape.model.rule.Rule("Random Walk") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).randomWalk();
			}
		});
		playerList.addRule(new org.ascape.model.rule.Rule("Play Neighbor") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).playNeighbor();
			}
		});
		playerList.addRule(new org.ascape.model.rule.Rule("Update Age") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).updateAge();
			}
		});
		playerList.addRule(new org.ascape.model.rule.Rule("Fission Rule") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).fissionRule();
			}
		});
		playerList.addRule(new org.ascape.model.rule.Rule("Die At Age") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).dieAtAge();
			}
		});
		playerList.addRule(new org.ascape.model.rule.Rule("Die At Wealth 0") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((edu.brook.Player) a).dieAtWealth0();
			}
		});
	}

	/**
	 * Creates UI views for Demographic Prisoner_s Dilemma.
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		addView(new com.metascape.escape.view.charts.ChartView());
		addView(new com.metascape.escape.view.vis.GEFView());

	}

	public void scapeSetup(org.ascape.model.event.ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		playerList.setSize(playerCount);
	}

	org.eclipse.gef.EditPartFactory factory;

	org.eclipse.gef.EditPartFactory treeFactory;

	public org.eclipse.gef.EditPartFactory getEditPartFactory() {
		if (factory == null) {
			factory = new DemographicPrisonersDilemmaPartFactory();
		}
		return factory;
	}

	public org.eclipse.gef.EditPartFactory getEditPartTreeFactory() {
		if (treeFactory == null) {
			treeFactory = new com.metascape.escape.view.gef.tree.ScapePartTreeFactory();
		}
		return treeFactory;
	}

	public static void main(String[] args) {
		(new org.ascape.runtime.NonGraphicRunner())
				.openInstance("edu.brook.DemographicPrisonersDilemma");
	}

	/**
	 * Gets the Player Count property for Demographic Prisoner_s Dilemma.
	 * @return The number of players to create.
	 */

	public int getPlayerCount() {
		return playerCount;
	}

	/**
	 * Sets the Player Count property for Demographic Prisoner_s Dilemma.
	 * The number of players to create.
	 * @param _playerCount the new Player Count value
	 */

	public void setPlayerCount(int _playerCount) {
		playerCount = _playerCount;
	}
	/**
	 * Gets the Minimum Wealth property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	public int getMinimumWealth() {
		return minimumWealth;
	}

	/**
	 * Sets the Minimum Wealth property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _minimumWealth the new Minimum Wealth value
	 */

	public void setMinimumWealth(int _minimumWealth) {
		minimumWealth = _minimumWealth;
	}
	/**
	 * Gets the Maximum Wealth property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	public int getMaximumWealth() {
		return maximumWealth;
	}

	/**
	 * Sets the Maximum Wealth property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _maximumWealth the new Maximum Wealth value
	 */

	public void setMaximumWealth(int _maximumWealth) {
		maximumWealth = _maximumWealth;
	}
	/**
	 * Gets the Maximum Age property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	public int getMaximumAge() {
		return maximumAge;
	}

	/**
	 * Sets the Maximum Age property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _maximumAge the new Maximum Age value
	 */

	public void setMaximumAge(int _maximumAge) {
		maximumAge = _maximumAge;
	}
	/**
	 * Gets the Payoff Cooperate Cooperate property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when playing cooperate against cooperate.
	 */

	public int getPayoffCC() {
		return payoffCC;
	}

	/**
	 * Sets the Payoff Cooperate Cooperate property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when playing cooperate against cooperate.
	 * @param _payoffCC the new Payoff Cooperate Cooperate value
	 */

	public void setPayoffCC(int _payoffCC) {
		payoffCC = _payoffCC;
	}
	/**
	 * Gets the Payoff Cooperate Defect property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when playing cooperate against defect.
	 */

	public int getPayoffCD() {
		return payoffCD;
	}

	/**
	 * Sets the Payoff Cooperate Defect property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when playing cooperate against defect.
	 * @param _payoffCD the new Payoff Cooperate Defect value
	 */

	public void setPayoffCD(int _payoffCD) {
		payoffCD = _payoffCD;
	}
	/**
	 * Gets the Payoff Defect Cooperate property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when playing defect against cooperate.
	 */

	public int getPayoffDC() {
		return payoffDC;
	}

	/**
	 * Sets the Payoff Defect Cooperate property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when playing defect against cooperate.
	 * @param _payoffDC the new Payoff Defect Cooperate value
	 */

	public void setPayoffDC(int _payoffDC) {
		payoffDC = _payoffDC;
	}
	/**
	 * Gets the Payoff Defect Defect property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when both players defect.
	 */

	public int getPayoffDD() {
		return payoffDD;
	}

	/**
	 * Sets the Payoff Defect Defect property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when both players defect.
	 * @param _payoffDD the new Payoff Defect Defect value
	 */

	public void setPayoffDD(int _payoffDD) {
		payoffDD = _payoffDD;
	}
	/**
	 * Gets the Fission Wealth property for Demographic Prisoner_s Dilemma.
	 * @return The wealth level at which an agent can fission.
	 */

	public int getFissionWealth() {
		return fissionWealth;
	}

	/**
	 * Sets the Fission Wealth property for Demographic Prisoner_s Dilemma.
	 * The wealth level at which an agent can fission.
	 * @param _fissionWealth the new Fission Wealth value
	 */

	public void setFissionWealth(int _fissionWealth) {
		fissionWealth = _fissionWealth;
	}
	/**
	 * Gets the Inheirited Wealth property for Demographic Prisoner_s Dilemma.
	 * @return The wealth that is passed from parent to child.
	 */

	public int getInheiritedWealth() {
		return inheiritedWealth;
	}

	/**
	 * Sets the Inheirited Wealth property for Demographic Prisoner_s Dilemma.
	 * The wealth that is passed from parent to child.
	 * @param _inheiritedWealth the new Inheirited Wealth value
	 */

	public void setInheiritedWealth(int _inheiritedWealth) {
		inheiritedWealth = _inheiritedWealth;
	}
	/**
	 * Gets the Initial Wealth property for Demographic Prisoner_s Dilemma.
	 * @return The wealth initially assigned to an agent at the beginning of model run.
	 */

	public int getInitialWealth() {
		return initialWealth;
	}

	/**
	 * Sets the Initial Wealth property for Demographic Prisoner_s Dilemma.
	 * The wealth initially assigned to an agent at the beginning of model run.
	 * @param _initialWealth the new Initial Wealth value
	 */

	public void setInitialWealth(int _initialWealth) {
		initialWealth = _initialWealth;
	}
	/**
	 * Gets the Mutation Rate property for Demographic Prisoner_s Dilemma.
	 * @return The probabaility that a given agent will change strategies in a given period, expressed as a value from 0.0 to 1.0.
	 */

	public double getMutationRate() {
		return mutationRate;
	}

	/**
	 * Sets the Mutation Rate property for Demographic Prisoner_s Dilemma.
	 * The probabaility that a given agent will change strategies in a given period, expressed as a value from 0.0 to 1.0.
	 * @param _mutationRate the new Mutation Rate value
	 */

	public void setMutationRate(double _mutationRate) {
		mutationRate = _mutationRate;
	}
	/**
	 * Gets the Death Age property for Demographic Prisoner_s Dilemma.
	 * @return The number of periods before an agent will be removed from game when Die At Age rule is active.
	 */

	public int getDeathAge() {
		return deathAge;
	}

	/**
	 * Sets the Death Age property for Demographic Prisoner_s Dilemma.
	 * The number of periods before an agent will be removed from game when Die At Age rule is active.
	 * @param _deathAge the new Death Age value
	 */

	public void setDeathAge(int _deathAge) {
		deathAge = _deathAge;
	}
	/**
	 * Gets the Birth Age property for Demographic Prisoner_s Dilemma.
	 * @return The actual age in years as determined by data set.
	 */

	public int getBirthAge() {
		return birthAge;
	}

	/**
	 * Sets the Birth Age property for Demographic Prisoner_s Dilemma.
	 * The actual age in years as determined by data set.
	 * @param _birthAge the new Birth Age value
	 */

	public void setBirthAge(int _birthAge) {
		birthAge = _birthAge;
	}
	/**
	 * Gets the Dimensions property for Game Space.
	 * @return The size of each dimension.
	 */

	public int[] getGameSpaceDimensions() {
		return gameSpaceDimensions;
	}

	/**
	 * Sets the Dimensions property for Game Space.
	 * The size of each dimension.
	 * @param _gameSpaceDimensions the new Dimensions value
	 */

	public void setGameSpaceDimensions(int[] _gameSpaceDimensions) {
		gameSpaceDimensions = _gameSpaceDimensions;
	}
	/**
	 * Gets the Width property for Game Space.
	 * @return The horizontal extent of the space.
	 */

	public int getGameSpaceWidth() {
		return gameSpaceDimensions[0];
	}

	/**
	 * Sets the Width property for Game Space.
	 * The horizontal extent of the space.
	 * @param _gameSpaceWidth the new Width value
	 */

	public void setGameSpaceWidth(int _gameSpaceWidth) {
		gameSpaceDimensions[0] = _gameSpaceWidth;
	}
	/**
	 * Gets the Height property for Game Space.
	 * @return The vertical extent of the space.
	 */

	public int getGameSpaceHeight() {
		return gameSpaceDimensions[1];
	}

	/**
	 * Sets the Height property for Game Space.
	 * The vertical extent of the space.
	 * @param _gameSpaceHeight the new Height value
	 */

	public void setGameSpaceHeight(int _gameSpaceHeight) {
		gameSpaceDimensions[1] = _gameSpaceHeight;
	}
	/**
	 * Gets the Game Space property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	public org.ascape.model.Scape getGameSpace() {
		return gameSpace;
	}

	/**
	 * Sets the Game Space property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _gameSpace the new Game Space value
	 */

	public void setGameSpace(org.ascape.model.Scape _gameSpace) {
		gameSpace = _gameSpace;
	}

	/**
	 * Gets the Player property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	public org.ascape.model.Scape getPlayer() {
		return playerList;
	}

	/**
	 * Sets the Player property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _player the new Player value
	 */

	public void setPlayer(org.ascape.model.Scape _player) {
		playerList = _player;
	}

}

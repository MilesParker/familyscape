package edu.brook.ccf.rpm;

import org.ascape.util.vis.ColorFeature;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Display;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.ColorConstants;

import org.eclipse.jface.viewers.IColorProvider;

/**
 * Gender Style Java Implementation.
 * 
 * Generated by AMF for model: RelationshipsAndPregnancyData.metaabm in project: edu.brook.parent.escape 
 */

public class GenderStyleColorProvider implements IColorProvider {

	/**
	 * Provides a foreground color for the given Adult.
	 * 
	 * @param object the agent
	 * @return	the foreground color for the element, or <code>null</code> 
	 *   to use the default foreground color
	 */
	public Color getForeground(Object object) {

		//todo separate out this functionality
		Color color = null;
		Color fillColor = null;
		Color outlineColor = null;
		Adult style = (Adult) object;
		Adult drawGenderRule = style;

		double unitforAge = drawGenderRule.getAgeinYearsIndex() / 30.0;
		double unitforAgeRange = java.lang.Math.min(unitforAge, 1)

		;
		if (drawGenderRule.getGender() == GenderEnum.male) {

			color = new Color(Display.getCurrent(),
					(int) (unitforAgeRange * 255),
					(int) (unitforAgeRange * 255), (int) (1.0 * 255));

			fillColor = color;

			color = ColorConstants.blue;

			outlineColor = color;

			int now = drawGenderRule.getScape().getPeriod();
			if (now == drawGenderRule.getDayofLastSex()) {

				color = ColorConstants.orange;

				fillColor = color;

			}
			if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {

				color = ColorConstants.black;

				fillColor = color;

			}
		}
		if (drawGenderRule.getGender() == GenderEnum.female) {

			color = new Color(Display.getCurrent(), (int) (1.0 * 255),
					(int) (unitforAgeRange * 255),
					(int) (unitforAgeRange * 255));

			if (drawGenderRule.getPregnancyStatus() == PregnancyStatusEnum.pregnant) {

				color = ColorConstants.green;

				fillColor = color;

			}

			fillColor = color;

			color = ColorConstants.red;

			outlineColor = color;

			int now = drawGenderRule.getScape().getPeriod();
			if (now == drawGenderRule.getDayofLastSex()) {

				color = ColorConstants.orange;

				fillColor = color;

			}
			if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {

				color = ColorConstants.black;

				fillColor = color;

			}
		}

		if (outlineColor != null) {
			return outlineColor;
		} else if (fillColor != null) {
			return fillColor;
		}
		return ColorFeature.BLACK;
	}

	/**
	 * Provides a background color for the given Adult.
	 * 
	 * @param object the agent
	 * @return	the background color for the element, or <code>null</code> 
	 *   to use the default background color
	 */
	public Color getBackground(Object object) {

		//todo separate out this functionality
		Color color = null;
		Color fillColor = null;
		Color outlineColor = null;
		Adult style = (Adult) object;
		Adult drawGenderRule = style;

		double unitforAge = drawGenderRule.getAgeinYearsIndex() / 30.0;
		double unitforAgeRange = java.lang.Math.min(unitforAge, 1)

		;
		if (drawGenderRule.getGender() == GenderEnum.male) {

			color = new Color(Display.getCurrent(),
					(int) (unitforAgeRange * 255),
					(int) (unitforAgeRange * 255), (int) (1.0 * 255));

			fillColor = color;

			color = ColorConstants.blue;

			outlineColor = color;

			int now = drawGenderRule.getScape().getPeriod();
			if (now == drawGenderRule.getDayofLastSex()) {

				color = ColorConstants.orange;

				fillColor = color;

			}
			if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {

				color = ColorConstants.black;

				fillColor = color;

			}
		}
		if (drawGenderRule.getGender() == GenderEnum.female) {

			color = new Color(Display.getCurrent(), (int) (1.0 * 255),
					(int) (unitforAgeRange * 255),
					(int) (unitforAgeRange * 255));

			if (drawGenderRule.getPregnancyStatus() == PregnancyStatusEnum.pregnant) {

				color = ColorConstants.green;

				fillColor = color;

			}

			fillColor = color;

			color = ColorConstants.red;

			outlineColor = color;

			int now = drawGenderRule.getScape().getPeriod();
			if (now == drawGenderRule.getDayofLastSex()) {

				color = ColorConstants.orange;

				fillColor = color;

			}
			if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {

				color = ColorConstants.black;

				fillColor = color;

			}
		}

		if (fillColor != null) {
			return fillColor;
		} else if (outlineColor != null) {
			return outlineColor;
		}
		return ColorFeature.BLACK;
	}
}

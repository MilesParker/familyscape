package edu.brook.ccf.rpm;

import org.eclipse.amp.agf.IGraphicsAdapter;
import org.eclipse.amp.agf.GraphicsAdapter;
import org.eclipse.amp.agf.gef.IFigureProvider;
import org.eclipse.core.runtime.IAdapterFactory;

import org.eclipse.amp.agf.gef.IFigureProvider;
import org.eclipse.jface.viewers.IColorProvider;
import org.eclipse.jface.viewers.ILabelProvider;

/**
 * <!-- begin-user-doc -->
 * FamilyScape Java Implementation.
 * A model of unintended pregnancies and poor births. Covers most if not all key dynamics, including relationship and marriage formation, coital activity, contraception efficacy, and pregnancy outcome. Extensive work has been done to dock and callibrate this agent-based model with statistical models. This model will be the subject of a forthcoming paper by Thomas et. al. Current results should not be taken as definitive and are not intended for publication.

Model Design: Miles Parker and Adam Thomas (miles@metascapeabm.com, athomas@brookings.edu)
Model and Software Development: Miles Parker
Basic Research and Statistical Model: Adam Thomas and Emily Monea

Supported by The William and Flora Hewlett Foundation
 * Generated by AMF for model: FamilyScape.metaabm in project: edu.brook.parent.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class FamilyScapeGraphicsAdapter extends GraphicsAdapter {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static IGraphicsAdapter singleton;

	IColorProvider[] familyScapeColorProviders = new IColorProvider[]{};
	IColorProvider[] adultColorProviders = new IColorProvider[]{GenderStyleColorProvider
			.getDefault()};
	IColorProvider[] neighborhoodCellColorProviders = new IColorProvider[]{NeighborhoodCellStyle2DColorProvider
			.getDefault()};

	IFigureProvider[] familyScapeFigureProviders = new IFigureProvider[]{};
	IFigureProvider[] adultFigureProviders = new IFigureProvider[]{GenderStyleFigureProvider
			.getDefault()};
	IFigureProvider[] neighborhoodCellFigureProviders = new IFigureProvider[]{NeighborhoodCellStyle2DFigureProvider
			.getDefault()};

	/**
	 * <!-- begin-user-doc -->
	 * @param type
	 * @return
	 * @see org.eclipse.amp.agf.IGraphicsAdapter#getColorsForClass(java.lang.Class)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IColorProvider[] getColorsForClass(Class type) {
		if (type == FamilyScape.class) {
			return familyScapeColorProviders;
		}
		if (type == Adult.class) {
			return adultColorProviders;
		}
		if (type == NeighborhoodCell.class) {
			return neighborhoodCellColorProviders;
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * @param type
	 * @return
	 * @see org.eclipse.amp.agf.IGraphicsAdapter#getFiguresForClass(java.lang.Class)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IFigureProvider[] getFiguresForClass(Class type) {
		if (type == FamilyScape.class) {
			return familyScapeFigureProviders;
		}
		if (type == Adult.class) {
			return adultFigureProviders;
		}
		if (type == NeighborhoodCell.class) {
			return neighborhoodCellFigureProviders;
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * @param type
	 * @return
	 * @see org.eclipse.amp.agf.IGraphicsAdapter#getLabelsForClass(java.lang.Class)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ILabelProvider[] getLabelsForClass(Class type) {
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static IGraphicsAdapter getDefault() {
		if (singleton == null) {
			singleton = new FamilyScapeGraphicsAdapter();
		}
		return singleton;
	}
}

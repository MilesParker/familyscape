package edu.brook.ccf.rpm;

import org.ascape.util.vis.ColorFeature;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Display;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.ColorConstants;

import org.eclipse.jface.viewers.IColorProvider;
import org.eclipse.amp.agf.gef.IFigureProvider;
import org.eclipse.amp.agf.gef.DefaultFigureProvider;
import org.eclipse.amp.agf.gef.Shapes;

/**
 * <!-- begin-user-doc -->
 * Gender Style Java Implementation.
 * 
 * Generated by AMF for model: FamilyScape.metaabm in project: edu.brook.parent.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class GenderStyleFigureProvider extends DefaultFigureProvider {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static IFigureProvider singleton;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IFigure getFigure(Object object) {
		IFigure figure = null;
		Color color = null;
		Adult style = (Adult) object;
		Adult drawGenderRule = style;
		double unitforAge = drawGenderRule.getAgeinYearsIndex() / 30.0;

		double unitforAgeRange = java.lang.Math.min(unitforAge, 1)

		;

		if (drawGenderRule.getGender() == GenderEnum.male) {
			if (figure == null) {
				figure = Shapes.createRectangle();
			}
			color = new Color(Display.getCurrent(),
					(int) (unitforAgeRange * 255),
					(int) (unitforAgeRange * 255), (int) (1 * 255));

			figure.setBackgroundColor(color);
			((Shape) figure).setFill(true);
			color = ColorConstants.blue;

			figure.setForegroundColor(color);
			((Shape) figure).setOutline(true);
			int now = drawGenderRule.getScape().getPeriod();

			if (now == drawGenderRule.getDayofLastSex()) {
				IFigure markerFigure = Shapes.getMarkerShape(figure, 0);
				color = ColorConstants.orange;

				markerFigure.setBackgroundColor(color);
				((Shape) markerFigure).setFill(true);
			}
			if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {
				IFigure markerFigure = Shapes.getMarkerShape(figure, 0);
				color = ColorConstants.black;

				markerFigure.setBackgroundColor(color);
				((Shape) markerFigure).setFill(true);
			}
		}
		if (drawGenderRule.getGender() == GenderEnum.female) {
			if (drawGenderRule.getPregnancyStatus() == PregnancyStatusEnum.pregnant) {
				if (figure == null) {
					figure = Shapes.createOval();
				}
				color = new Color(Display.getCurrent(),
						(int) (unitforAgeRange * 255), (int) (1 * 255),
						(int) (unitforAgeRange * 255));

				figure.setBackgroundColor(color);
				((Shape) figure).setFill(true);
				color = ColorConstants.green;

				figure.setForegroundColor(color);
				((Shape) figure).setOutline(true);
				int now = drawGenderRule.getScape().getPeriod();

				if (now == drawGenderRule.getDayofLastSex()) {
					IFigure markerFigure = Shapes.getMarkerShape(figure, 0);
					color = ColorConstants.orange;

					markerFigure.setBackgroundColor(color);
					((Shape) markerFigure).setFill(true);
				}
				if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {
					IFigure markerFigure = Shapes.getMarkerShape(figure, 0);
					color = ColorConstants.black;

					markerFigure.setBackgroundColor(color);
					((Shape) markerFigure).setFill(true);
				}
			}
			if (drawGenderRule.getPregnancyStatus() == PregnancyStatusEnum.notPregnant) {
				if (figure == null) {
					figure = Shapes.createOval();
				}
				color = new Color(Display.getCurrent(), (int) (1 * 255),
						(int) (unitforAgeRange * 255),
						(int) (unitforAgeRange * 255));

				figure.setBackgroundColor(color);
				((Shape) figure).setFill(true);
				color = ColorConstants.red;

				figure.setForegroundColor(color);
				((Shape) figure).setOutline(true);
				int now = drawGenderRule.getScape().getPeriod();

				if (now == drawGenderRule.getDayofLastSex()) {
					IFigure markerFigure = Shapes.getMarkerShape(figure, 0);
					color = ColorConstants.orange;

					markerFigure.setBackgroundColor(color);
					((Shape) markerFigure).setFill(true);
				}
				if (drawGenderRule.getMaritalStatus() == MaritalStatusEnum.married) {
					IFigure markerFigure = Shapes.getMarkerShape(figure, 0);
					color = ColorConstants.black;

					markerFigure.setBackgroundColor(color);
					((Shape) markerFigure).setFill(true);
				}
			}
		}
		return figure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static IFigureProvider getDefault() {
		if (singleton == null) {
			singleton = new GenderStyleFigureProvider();
		}
		return singleton;
	}
}

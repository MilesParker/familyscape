package edu.brook.ccf.rpm;

import java.util.List;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

/**
 * Adult Java Implementation.
 * 
 * Generated by AMF for model: FamilyScape.metaabm in project: edu.brook.parent.escape 
 */
public class Adult extends CellOccupant {

	/**
	 * 
	 */
	private GenderEnum gender = GenderEnum.female;

	/**
	 * 
	 */
	private int ageinYears = 0;

	/**
	 * 
	 */
	private int ageinYearsIndex = 0;

	/**
	 * 
	 */
	private AgeGroupEnum ageGroup = AgeGroupEnum.years15to19;

	/**
	 * 
	 */
	private EducationEnum education = EducationEnum.hS;

	/**
	 * 
	 */
	private boolean inRelationship = false;

	/**
	 * 
	 */
	private MaritalStatusEnum maritalStatus = MaritalStatusEnum.single;

	/**
	 * 
	 */
	private ContraceptionMethodEnum contraceptionMethod = ContraceptionMethodEnum.none;

	/**
	 * 
	 */
	private boolean rhythmMethodUser = false;

	/**
	 * 
	 */
	private int projectedDayofBirth = 0;

	/**
	 * The day on which last miscarriage occurs or will occur. Zero if no such event.
	 */
	private int projectedDayofMiscarriage = 0;

	/**
	 * The day on which last abortion occurred or will occur. Zero if no such event.
	 */
	private int projectedDayofAbortion = 0;

	/**
	 * My desire to enter into a relationship with a member of the opposite sex, given that I am not currently in a relationship. 
	 */
	private double pRelationshipInitial = 0.0;

	/**
	 * Given that I am currently in a relationship, the likelihood that I wish to remain in that relationship for the current period.
	 */
	private double pEndRelationship = 0.0;

	/**
	 * The probability that this agent will become married on a given day, ignoring pregnancy status.
	 */
	private double pMarriage = 0.0;

	/**
	 * 
	 */
	private double pDivorce = 0.0;

	/**
	 * Given that I am in a relationship with a partner with whom I have not had sex, the likilihood that I wish to engage in sex with that partner during given period.
	 */
	private double pSex = 0.0;

	/**
	 * Given that I continue in a relationship with whom I've had sex, the likilihood that I wish to engage in sex with that same partner during given period.
	 */
	private double pSexInitial = 0.0;

	/**
	 * 
	 */
	private int sexCountinRelationship = 0;

	/**
	 * 
	 */
	private int dayinCycle = 0;

	/**
	 * 
	 */
	private int sexCountinLifetime = 0;

	/**
	 * 
	 */
	private int daysinCurrentRelationship = 0;

	/**
	 * 
	 */
	private int sexPartnersinLifetime = 0;

	/**
	 * The last day in which sex occurred.  Zero if no such event.
	 */
	private int dayofLastSex = -1;

	/**
	 * 
	 */
	private int pregnanciesinLifetime = 0;

	/**
	 * The total number of live birth events.
	 */
	private int birthsinLifetime = 0;

	/**
	 * 
	 */
	private int abortionsinLifetime = 0;

	/**
	 * 
	 */
	private int miscarriagesinLifetime = 0;

	/**
	 * 
	 */
	private double ratioPregnanciestoSexEvents = 0.0;

	/**
	 * 
	 */
	private int poorBirthsinLifetime = 0;

	/**
	 * 
	 */
	private RaceEnum race = RaceEnum.white;

	/**
	 * Socio-Economic Category. Currently defined by mother's education level, i.e. high school, high-school degree, some college, at least a college degree.
	 */
	private SESEnum sES = SESEnum.category4;

	/**
	 * 
	 */
	private CoitalBehaviorTypeEnum coitalBehaviorType = CoitalBehaviorTypeEnum.veryLowFrequency;

	/**
	 * 
	 */
	private int marriedCode = -1;

	/**
	 * 
	 */
	private int unmarriedCode = -1;

	/**
	 * 
	 */
	private int iD = 0;

	/**
	 * 
	 */
	private int spouseID = 0;

	/**
	 * 0 for female, 1 for male.
	 */
	private int maleCode = -1;

	/**
	 * 
	 */
	private int femaleCode = -1;

	/**
	 * 
	 */
	private PartnerContraceptionMethodEnum partnerContraceptionMethod = PartnerContraceptionMethodEnum.otherContraception;

	/**
	 * 
	 */
	private int sterilizationChoices = 0;

	/**
	 * 
	 */
	private PregnancyStatusEnum pregnancyStatus = PregnancyStatusEnum.notPregnant;

	/**
	 * 
	 */
	private PregnancyStatusCoupleEnum pregnancyStatusCouple = PregnancyStatusCoupleEnum.notPregnant;

	/**
	 * Constructs a new Adult.
	 */
	public Adult() {
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private static long nextUniqueID;

	private long uniqueID;

	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			Adult clone = (Adult) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	public FamilyScape getFamilyScape() {
		return (FamilyScape) getScape().getScape();
	}
	public java.util.List getNetwork() {
		return ((Graph) getFamilyScape().getPartners().getSpace())
				.getNeighborsFor(this);
	}

	/**
	 * Initialize Location Initialization. Executed once at the beginning of each model run.
	 */
	public void initializeLocation() {
		NeighborhoodCell initialLocation = (NeighborhoodCell) ((org.ascape.model.space.Discrete) getFamilyScape()
				.getNeighborhood().getSpace()).findRandomAvailable();
		if (initialLocation != null) {
			if (getHostScape() != ((Agent) initialLocation).getScape()) {
				die();
				getFamilyScape().getAdultScape().add(this);
			}
			moveTo(initialLocation);
		}
	}

	/**
	 * Initialize Behavior Values Initialization. Executed once at the beginning of each model run.
	 */
	public void initializeBehaviorValues() {
		updateMaritalProbabilities();
		double pRelationshipEnd = randomInRange(getFamilyScape()
				.getPRelationshipEndMinimum(), getFamilyScape()
				.getPRelationshipEndMaximum());
		double pRelationshipBegin = randomInRange(getFamilyScape()
				.getPRelationshipBeginMinimum(), getFamilyScape()
				.getPRelationshipBeginMaximum());
		setPEndRelationship(pRelationshipEnd);
		setPRelationshipInitial(pRelationshipBegin);
	}

	/**
	 * Initialize Ages Initialization. Executed once at the beginning of each model run.
	 */
	public void initializeAges() {
		int initializeAgesAgeinYearsSubtractMinimumAge = getAgeinYears()
				- getFamilyScape().getMinimumAge();
		int initializeAgesRandomToLimit_LunarDays_ = randomToLimit(getFamilyScape()
				.getLunarDays());
		if (getAgeinYears() >= 20) {
			setAgeGroup(AgeGroupEnum.years20to24);
			if (getAgeinYears() >= 25) {
				setAgeGroup(AgeGroupEnum.years25to29);
				if (getAgeinYears() >= 30) {
					setAgeGroup(AgeGroupEnum.years30to44);
				}
			}
		}
		if (!(getAgeinYears() >= 20)) {
			setAgeGroup(AgeGroupEnum.years15to19);
		}
		setAgeinYearsIndex(initializeAgesAgeinYearsSubtractMinimumAge);
		setDayinCycle(initializeAgesRandomToLimit_LunarDays_);
	}

	/**
	 * Initialize Marital State Initialization. Executed once at the beginning of each model run.
	 */
	public void initializeMaritalState() {
		if (getMaritalStatus() == MaritalStatusEnum.married) {
			Conditional assignedSpouseCondition = new Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;
				public boolean meetsCondition(Object assignedSpouseCell) {
					if (assignedSpouseCell instanceof Adult) {
						Adult assignedSpouse = (Adult) assignedSpouseCell;
						return (assignedSpouse.getID() == getSpouseID());
					} else {
						return false;
					}
				}
			};
			Adult assignedSpouse = (Adult) getScape().findRandom(
					assignedSpouseCondition);
			if (assignedSpouse != null) {
				if (assignedSpouse.getID() == getSpouseID()) {
					((org.ascape.model.space.Graph) getFamilyScape()
							.getPartners().getSpace()).addNeighborSafe(this,
							assignedSpouse, false);
					if (getGender() == GenderEnum.female) {
						NeighborhoodCell assignedSpouseNeighborCell = (NeighborhoodCell) ((org.ascape.model.space.Discrete) assignedSpouse
								.getFamilyScape().getNeighborhood().getSpace())
								.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) assignedSpouse)
										.getHostCell());
						if (assignedSpouseNeighborCell != null) {
							if (getHostScape() != ((Agent) assignedSpouseNeighborCell)
									.getScape()) {
								die();
								getFamilyScape().getAdultScape().add(this);
							}
							moveTo(assignedSpouseNeighborCell);
							setInRelationship(true);
						}
					}
				}
			}
		}
	}

	/**
	 * Movement Rule. Executed every period.
	 */
	public void movement() {
		if (!isInRelationship()) {
			NeighborhoodCell nextCell = (NeighborhoodCell) ((org.ascape.model.space.Discrete) getFamilyScape()
					.getNeighborhood().getSpace())
					.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
							.getHostCell());
			if (nextCell != null) {
				if (getHostScape() != ((Agent) nextCell).getScape()) {
					die();
					getFamilyScape().getAdultScape().add(this);
				}
				moveTo(nextCell);
			}
			if (getFamilyScape().getWalkTowardAge() == 1 && !isInRelationship()) {
				Conditional adultNearAgeCondition = new Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;
					public boolean meetsCondition(Object adultNearAgeCell) {
						adultNearAgeCell = ((org.ascape.model.HostCell) adultNearAgeCell)
								.getOccupant();
						if (adultNearAgeCell instanceof Adult) {
							Adult adultNearAge = (Adult) adultNearAgeCell;
							return (getEducation() == adultNearAge
									.getEducation() && getAgeGroup() == adultNearAge
									.getAgeGroup());
						} else {
							return false;
						}
					}
				};
				Location adultNearAgeLocation = ((org.ascape.model.space.Discrete) getFamilyScape()
						.getNeighborhood().getSpace()).findNearestAvailable(
						((org.ascape.model.CellOccupant) this).getHostCell(),
						adultNearAgeCondition, false, getFamilyScape()
								.getAgentVision());
				if (adultNearAgeLocation != null) {
					Adult adultNearAge = (Adult) ((org.ascape.model.HostCell) adultNearAgeLocation)
							.getOccupant();
					if (adultNearAge != null) {
						moveToward(((org.ascape.model.CellOccupant) adultNearAge)
								.getHostCell());
					}
				}
			}
		}
	}

	/**
	 * Update Dates Rule. Executed every period.
	 */
	public void updateDates() {
		int cyclefromAgeinDays = getDayinCycle() + 1;
		if (cyclefromAgeinDays < getFamilyScape().getLunarDays()) {
			setDayinCycle(cyclefromAgeinDays);
		}
		if (!(cyclefromAgeinDays < getFamilyScape().getLunarDays())) {
			setDayinCycle(0);
		}
		if (isInRelationship()) {
			int incrementTime = getDaysinCurrentRelationship() + 1;
			setDaysinCurrentRelationship(incrementTime);
		}
	}

	/**
	 * Update Relationship Rule. Executed every period.
	 */
	public void updateRelationship() {
		int updateRelationshipNow = getScape().getPeriod();
		if ((getMaritalStatus() == MaritalStatusEnum.married && getDaysinCurrentRelationship() == 0)) {
			setUnmarriedCode(0);
			setMarriedCode(1);
			if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized
					&& getGender() == GenderEnum.male) {
				int updateRelationshipIncrementSterilizationChoices = getSterilizationChoices() + 1;
				double pSterilizeMaleMarried = pSterilizeMaleMarried();
				setSterilizationChoices(updateRelationshipIncrementSterilizationChoices);
				double maleMarriedSterilizeDraw = getRandom().nextDouble();
				if (maleMarriedSterilizeDraw < pSterilizeMaleMarried) {
					setContraceptionMethod(ContraceptionMethodEnum.sterilized);
					Conditional femalePartnerSterilizationCondition = new Conditional() {
						private static final long serialVersionUID = 6846144446402098985L;
						public boolean meetsCondition(
								Object femalePartnerSterilizationCell) {
							if (femalePartnerSterilizationCell instanceof Adult) {
								return true;
							} else {
								return false;
							}
						}
					};
					Adult femalePartnerSterilization = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
							.getPartners().getSpace()).findRandomNeighbor(this,
							femalePartnerSterilizationCondition);
					if (femalePartnerSterilization != null) {
						if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
							femalePartnerSterilization
									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
							femalePartnerSterilization.setUnmarriedCode(0);
							femalePartnerSterilization.setMarriedCode(1);
							double femaleSterilizeDraw = getRandom()
									.nextDouble();
							double pSterilizeFemaleMarried = femalePartnerSterilization
									.pSterilizeFemaleMarried();
							if (femaleSterilizeDraw < pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
							if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.none);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
						}
						if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
							femalePartnerSterilization
									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
							femalePartnerSterilization.setUnmarriedCode(0);
							femalePartnerSterilization.setMarriedCode(1);
							double femaleSterilizeDraw = getRandom()
									.nextDouble();
							double pSterilizeFemaleMarried = femalePartnerSterilization
									.pSterilizeFemaleMarried();
							if (femaleSterilizeDraw < pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
							if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.none);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
						}
					}
				}
				if (maleMarriedSterilizeDraw >= pSterilizeMaleMarried) {
					Conditional femalePartnerSterilizationCondition = new Conditional() {
						private static final long serialVersionUID = 6846144446402098985L;
						public boolean meetsCondition(
								Object femalePartnerSterilizationCell) {
							if (femalePartnerSterilizationCell instanceof Adult) {
								return true;
							} else {
								return false;
							}
						}
					};
					Adult femalePartnerSterilization = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
							.getPartners().getSpace()).findRandomNeighbor(this,
							femalePartnerSterilizationCondition);
					if (femalePartnerSterilization != null) {
						if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
							femalePartnerSterilization
									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
							femalePartnerSterilization.setUnmarriedCode(0);
							femalePartnerSterilization.setMarriedCode(1);
							double femaleSterilizeDraw = getRandom()
									.nextDouble();
							double pSterilizeFemaleMarried = femalePartnerSterilization
									.pSterilizeFemaleMarried();
							if (femaleSterilizeDraw < pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
							if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.none);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
						}
						if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
							femalePartnerSterilization
									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
							femalePartnerSterilization.setUnmarriedCode(0);
							femalePartnerSterilization.setMarriedCode(1);
							double femaleSterilizeDraw = getRandom()
									.nextDouble();
							double pSterilizeFemaleMarried = femalePartnerSterilization
									.pSterilizeFemaleMarried();
							if (femaleSterilizeDraw < pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
							if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {
								femalePartnerSterilization
										.setContraceptionMethod(ContraceptionMethodEnum.none);
								setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
								setInRelationship(true);
								femalePartnerSterilization
										.setInRelationship(true);
							}
						}
					}
				}
			}
			if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized
					&& getGender() == GenderEnum.male) {
				Conditional femalePartnerSterilizationCondition = new Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;
					public boolean meetsCondition(
							Object femalePartnerSterilizationCell) {
						if (femalePartnerSterilizationCell instanceof Adult) {
							return true;
						} else {
							return false;
						}
					}
				};
				Adult femalePartnerSterilization = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
						.getPartners().getSpace()).findRandomNeighbor(this,
						femalePartnerSterilizationCondition);
				if (femalePartnerSterilization != null) {
					if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
						femalePartnerSterilization
								.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
						femalePartnerSterilization.setUnmarriedCode(0);
						femalePartnerSterilization.setMarriedCode(1);
						double femaleSterilizeDraw = getRandom().nextDouble();
						double pSterilizeFemaleMarried = femalePartnerSterilization
								.pSterilizeFemaleMarried();
						if (femaleSterilizeDraw < pSterilizeFemaleMarried) {
							femalePartnerSterilization
									.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
							setInRelationship(true);
							femalePartnerSterilization.setInRelationship(true);
						}
						if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {
							femalePartnerSterilization
									.setContraceptionMethod(ContraceptionMethodEnum.none);
							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
							setInRelationship(true);
							femalePartnerSterilization.setInRelationship(true);
						}
					}
					if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
						femalePartnerSterilization
								.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
						femalePartnerSterilization.setUnmarriedCode(0);
						femalePartnerSterilization.setMarriedCode(1);
						double femaleSterilizeDraw = getRandom().nextDouble();
						double pSterilizeFemaleMarried = femalePartnerSterilization
								.pSterilizeFemaleMarried();
						if (femaleSterilizeDraw < pSterilizeFemaleMarried) {
							femalePartnerSterilization
									.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
							setInRelationship(true);
							femalePartnerSterilization.setInRelationship(true);
						}
						if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {
							femalePartnerSterilization
									.setContraceptionMethod(ContraceptionMethodEnum.none);
							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
							setInRelationship(true);
							femalePartnerSterilization.setInRelationship(true);
						}
					}
				}
			}
		}
		if ((isInRelationship() && getDaysinCurrentRelationship() == 0 && getMaritalStatus() == MaritalStatusEnum.single)) {
			setUnmarriedCode(1);
			setMarriedCode(0);
			setInRelationship(true);
		}
		if ((getDaysinCurrentRelationship() > 0 && getMaritalStatus() == MaritalStatusEnum.single)) {
			double continueDraw = getRandom().nextDouble();
			if (continueDraw < getPEndRelationship()) {
				Conditional relationshipPartnerCondition = new Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;
					public boolean meetsCondition(Object relationshipPartnerCell) {
						if (relationshipPartnerCell instanceof Adult) {
							return true;
						} else {
							return false;
						}
					}
				};
				Adult relationshipPartner = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
						.getPartners().getSpace()).findRandomNeighbor(this,
						relationshipPartnerCondition);
				if (relationshipPartner != null) {

					((org.ascape.model.space.Graph) getFamilyScape()
							.getPartners().getSpace()).clearNeighbors(this);
					relationshipPartner.setInRelationship(false);
					setInRelationship(false);
				}
			}
		}
		if ((getMaritalStatus() == MaritalStatusEnum.single && getUnmarriedCode() == -1)) {
			setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
			double unmarriedSterilizeDraw = getRandom().nextDouble();
			if (getGender() == GenderEnum.male) {
				double pSterilizeMaleUnmarried = pSterilizeMaleUnmarried();
				if (unmarriedSterilizeDraw < pSterilizeMaleUnmarried) {
					setContraceptionMethod(ContraceptionMethodEnum.sterilized);
					setInRelationship(false);
				}
				if (unmarriedSterilizeDraw >= pSterilizeMaleUnmarried) {
					setInRelationship(false);
				}
			}
			if (getGender() == GenderEnum.female) {
				double pSterilizeFemaleUnmarried = pSterilizeFemaleUnmarried();
				if (unmarriedSterilizeDraw < pSterilizeFemaleUnmarried) {
					setContraceptionMethod(ContraceptionMethodEnum.sterilized);
					setInRelationship(false);
				}
				if (unmarriedSterilizeDraw >= pSterilizeFemaleUnmarried) {
					setInRelationship(false);
				}
			}
		}
		if (getGender() == GenderEnum.female
				&& (getMaritalStatus() != MaritalStatusEnum.married && updateRelationshipNow >= getFamilyScape()
						.getMarriageAndDivorceStartDay())) {
			double marriageDrawSubsequent = getRandom().nextDouble();
			if (marriageDrawSubsequent < getPMarriage()) {
				Conditional marriagePartnerCondition = new Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;
					public boolean meetsCondition(Object marriagePartnerCell) {
						if (marriagePartnerCell instanceof Adult) {
							return true;
						} else {
							return false;
						}
					}
				};
				Adult marriagePartner = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
						.getPartners().getSpace()).findRandomNeighbor(this,
						marriagePartnerCondition);
				if (marriagePartner != null) {
					if (marriageDrawSubsequent < marriagePartner.getPMarriage()) {
						setMaritalStatus(MaritalStatusEnum.married);
						marriagePartner
								.setMaritalStatus(MaritalStatusEnum.married);
					}
				}
			}
		}
		if ((getMaritalStatus() == MaritalStatusEnum.married && updateRelationshipNow >= getFamilyScape()
				.getMarriageAndDivorceStartDay())) {
			double divorceDrawSubsequent = getRandom().nextDouble();
			if (divorceDrawSubsequent < getPDivorce()) {
				Conditional divorcingPartnerCondition = new Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;
					public boolean meetsCondition(Object divorcingPartnerCell) {
						if (divorcingPartnerCell instanceof Adult) {
							return true;
						} else {
							return false;
						}
					}
				};
				Adult divorcingPartner = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
						.getPartners().getSpace()).findRandomNeighbor(this,
						divorcingPartnerCondition);
				if (divorcingPartner != null) {

					((org.ascape.model.space.Graph) getFamilyScape()
							.getPartners().getSpace()).clearNeighbors(this);
					divorcingPartner
							.setMaritalStatus(MaritalStatusEnum.divorced);
					setMaritalStatus(MaritalStatusEnum.divorced);
					setInRelationship(false);
					divorcingPartner.setInRelationship(false);
				}
			}
		}
	}

	/**
	 * Seek Partner Rule. Executed every period.
	 */
	public void seekPartner() {
		if (!isInRelationship()) {
			double enterRelationshipDraw = getRandom().nextDouble();
			if (enterRelationshipDraw < getPRelationshipInitial()) {
				Conditional newPartnerCondition = new Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;
					public boolean meetsCondition(Object newPartnerCell) {
						if (newPartnerCell instanceof Adult) {
							Adult newPartner = (Adult) newPartnerCell;
							return (getGender() != newPartner.getGender()
									&& getEducation() == newPartner
											.getEducation()
									&& getAgeGroup() == newPartner
											.getAgeGroup() && !newPartner
									.isInRelationship());
						} else {
							return false;
						}
					}
				};
				Adult newPartner = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
						.getNeighborhood().getSpace()).findRandomNeighbor(this,
						newPartnerCondition);
				if (newPartner != null) {
					if (enterRelationshipDraw < newPartner
							.getPRelationshipInitial()
							&& (getEducation() == newPartner.getEducation()
									&& getGender() != newPartner.getGender()
									&& getAgeGroup() == newPartner
											.getAgeGroup() && !newPartner
									.isInRelationship())) {
						((org.ascape.model.space.Graph) getFamilyScape()
								.getPartners().getSpace()).addNeighborSafe(
								this, newPartner, false);
						((org.ascape.model.space.Graph) getFamilyScape()
								.getPastPartners().getSpace()).addNeighborSafe(
								this, newPartner, true);
						if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
							newPartner
									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
							newPartner.setInRelationship(true);
							setInRelationship(true);
						}
						if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
							newPartner
									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
							newPartner.setInRelationship(true);
							setInRelationship(true);
						}
						if (newPartner.getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
							newPartner.setInRelationship(true);
							setInRelationship(true);
						}
						if (newPartner.getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
							newPartner.setInRelationship(true);
							setInRelationship(true);
						}
					}
				}
			}
		}
	}

	/**
	 * Pregnancy Outcome Rule. Executed every period.
	 */
	public void pregnancyOutcome() {
		if (getPregnancyStatus() == PregnancyStatusEnum.pregnant) {
			int currentDay = getScape().getPeriod();
			if (currentDay == getProjectedDayofAbortion()) {
				pregnancyEnd();
				int incrementAbortionsinLifetime = getAbortionsinLifetime() + 1;
				setAbortionsinLifetime(incrementAbortionsinLifetime);
			}
			if (currentDay == getProjectedDayofMiscarriage()) {
				pregnancyEnd();
				int incrementMiscarriagesinLifetime = getMiscarriagesinLifetime() + 1;
				setMiscarriagesinLifetime(incrementMiscarriagesinLifetime);
			}
			if (currentDay == getProjectedDayofBirth()) {
				pregnancyEnd();
				int incrementBirthsinLifetime = getBirthsinLifetime() + 1;
				setBirthsinLifetime(incrementBirthsinLifetime);
			}
		}
	}

	/**
	 * Sex Potential Rule. Executed every period.
	 */
	public void sexPotential() {
		if (getGender() == GenderEnum.male) {
			Conditional femalePartnerCondition = new Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;
				public boolean meetsCondition(Object femalePartnerCell) {
					if (femalePartnerCell instanceof Adult) {
						return true;
					} else {
						return false;
					}
				}
			};
			Adult femalePartner = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
					.getPartners().getSpace()).findRandomNeighbor(this,
					femalePartnerCondition);
			if (femalePartner != null) {
				double sexDraw = getRandom().nextDouble();
				if (getSexCountinRelationship() > 0) {
					double jointSubsequentSexProclivity = java.lang.Math.min(
							getPSex(), femalePartner.getPSex());
					if (femalePartner.isRhythmMethodUser()) {
						double intercourseBiasforCycleSubsequent = getFamilyScape()
								.getRhythmMethodBiasforDay()[getDayinCycle()];
						double sexProclivityGivenDayinCycleSubsequent = jointSubsequentSexProclivity
								* intercourseBiasforCycleSubsequent;
						if (sexDraw < sexProclivityGivenDayinCycleSubsequent) {
							int incrementSelfSexCount = getSexCountinLifetime() + 1;
							int incrementPartnerSexCount = femalePartner
									.getSexCountinLifetime() + 1;
							setSexCountinLifetime(incrementSelfSexCount);
							femalePartner
									.setSexCountinLifetime(incrementPartnerSexCount);
						}
					}
					if (sexDraw < jointSubsequentSexProclivity
							&& !femalePartner.isRhythmMethodUser()) {
						int incrementSelfSexCount = getSexCountinLifetime() + 1;
						int incrementPartnerSexCount = femalePartner
								.getSexCountinLifetime() + 1;
						setSexCountinLifetime(incrementSelfSexCount);
						femalePartner
								.setSexCountinLifetime(incrementPartnerSexCount);
					}
				}
				if (!(getSexCountinRelationship() > 0)) {
					double jointInitialSexProclivity = java.lang.Math.min(
							getPSexInitial(), femalePartner.getPSexInitial());
					if (femalePartner.isRhythmMethodUser()) {
						double intercourseBiasforCycleInitial = getFamilyScape()
								.getRhythmMethodBiasforDay()[getDayinCycle()];
						double sexProclivityGivenDayinCycle = jointInitialSexProclivity
								* intercourseBiasforCycleInitial;
						if (sexDraw < sexProclivityGivenDayinCycle) {
							int incrementSelfSexCount = getSexCountinLifetime() + 1;
							int incrementPartnerSexCount = femalePartner
									.getSexCountinLifetime() + 1;
							setSexCountinLifetime(incrementSelfSexCount);
							femalePartner
									.setSexCountinLifetime(incrementPartnerSexCount);
						}
					}
					if (sexDraw < jointInitialSexProclivity
							&& !femalePartner.isRhythmMethodUser()) {
						int incrementSelfSexCount = getSexCountinLifetime() + 1;
						int incrementPartnerSexCount = femalePartner
								.getSexCountinLifetime() + 1;
						setSexCountinLifetime(incrementSelfSexCount);
						femalePartner
								.setSexCountinLifetime(incrementPartnerSexCount);
					}
				}
			}
		}
	}

	/**
	 * Watch for changes in Sex Count in Lifetime.
	 */
	public void sexEvent() {
		int incrementSexCount = getSexCountinRelationship() + 1;
		int dayofSex = getScape().getPeriod();
		setSexCountinRelationship(incrementSexCount);
		int pregnanciesoverSexinLifetime = getPregnanciesinLifetime()
				/ incrementSexCount;
		setRatioPregnanciestoSexEvents(pregnanciesoverSexinLifetime);
		setDayofLastSex(dayofSex);
		if ((getContraceptionMethod() != ContraceptionMethodEnum.sterilized
				&& getGender() == GenderEnum.female && getPregnancyStatus() == PregnancyStatusEnum.notPregnant)) {
			Conditional malePartnerCondition = new Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;
				public boolean meetsCondition(Object malePartnerCell) {
					if (malePartnerCell instanceof Adult) {
						return true;
					} else {
						return false;
					}
				}
			};
			Adult malePartner = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
					.getPartners().getSpace()).findRandomNeighbor(this,
					malePartnerCondition);
			if (malePartner != null) {
				if (malePartner.getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
					double pregnancyDraw = getRandom().nextDouble();
					double fecundityinCycle = getFamilyScape()
							.getFecunditybyDayinCycle()[getDayinCycle()];
					double fecundityForAge = getFamilyScape()
							.getFecundityByAge()[getAgeinYearsIndex()];
					double pPregnancyAgeandCycle = fecundityinCycle
							* fecundityForAge;
					double pPregnancyAgeandCycleAddFecundityAdjustment = pPregnancyAgeandCycle
							+ getFamilyScape().getFecundityAdjustment();
					if ((getContraceptionMethod() == ContraceptionMethodEnum.pill && malePartner
							.getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender)) {
						double pPillCondomFailure = pPillCondomFailure();
						double pPregnancyPillandCondom = pPregnancyAgeandCycleAddFecundityAdjustment
								* pPillCondomFailure;
						if (pregnancyDraw < pPregnancyPillandCondom) {
							setPregnancyStatus(PregnancyStatusEnum.pregnant);
							pregnancyBegin();
						}
					}
					if ((getContraceptionMethod() == ContraceptionMethodEnum.pill && (malePartner
							.getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender || malePartner
							.getContraceptionMethod() == ContraceptionMethodEnum.none))) {
						double pPillFailure = pPillFailure();
						double pPregnancyPillOnly = pPregnancyAgeandCycleAddFecundityAdjustment
								* pPillFailure;
						if (pregnancyDraw < pPregnancyPillOnly) {
							setPregnancyStatus(PregnancyStatusEnum.pregnant);
							pregnancyBegin();
						}
					}
					if ((getContraceptionMethod() == ContraceptionMethodEnum.none && (malePartner
							.getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender || malePartner
							.getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender))) {
						double pCondomFailure = pCondomFailure();
						double pPregnancyCondomOnly = pPregnancyAgeandCycleAddFecundityAdjustment
								* pCondomFailure;
						if (pregnancyDraw < pPregnancyCondomOnly) {
							pregnancyBegin();
						}
					}
					if (pregnancyDraw < pPregnancyAgeandCycleAddFecundityAdjustment
							&& (getContraceptionMethod() == ContraceptionMethodEnum.none && malePartner
									.getContraceptionMethod() == ContraceptionMethodEnum.none)) {
						pregnancyBegin();
					}
				}
			}
		}
	}

	/**
	 * Watch for changes in Sex Count in Relationship.
	 */
	public void sexinRelationshipEvent() {
		if (getSexCountinRelationship() == 1) {
			int newSexPartnerCount = getSexPartnersinLifetime() + 1;
			setSexPartnersinLifetime(newSexPartnerCount);
		}
	}

	/**
	 * Watch for changes in In Relationship.
	 */
	public void watchInRelationship() {
		if (!isInRelationship()) {
			setDaysinCurrentRelationship(0);
			setSexCountinRelationship(0);
			setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
			setPregnancyStatusCouple(PregnancyStatusCoupleEnum.notInCouple);
		}
		if (getMaritalStatus() == MaritalStatusEnum.married) {
			double coitalBehaviorDraw = getRandom().nextDouble();
			double pCoitalFrequencyVeryLowMarried = pCoitalFrequencyVeryLowMarried();
			double watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried = getMarriedCode()
					* pCoitalFrequencyVeryLowMarried;
			double pCoitalFrequencyVeryLowUnmarried = pCoitalFrequencyVeryLowUnmarried();
			double watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried = getUnmarriedCode()
					* pCoitalFrequencyVeryLowUnmarried;
			double jointPVeryLow = watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried
					+ watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried;
			double pCoitalFrequencyModerateMarried = pCoitalFrequencyModerateMarried();
			double pModerateMarriedCode = pCoitalFrequencyModerateMarried
					* getMarriedCode();
			double pCoitalFrequencyModerateUnmarried = pCoitalFrequencyModerateUnmarried();
			double pModerateUnmarriedCode = pCoitalFrequencyModerateUnmarried
					* getUnmarriedCode();
			double jointPModerate = pModerateMarriedCode
					+ pModerateUnmarriedCode;
			double pVeryLoworModerate = jointPModerate + jointPVeryLow;
			if (coitalBehaviorDraw >= pVeryLoworModerate) {
				setCoitalBehaviorType(CoitalBehaviorTypeEnum.highFrequency);
			}
			if (coitalBehaviorDraw < jointPVeryLow
					&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {
				setCoitalBehaviorType(CoitalBehaviorTypeEnum.veryLowFrequency);
			}
			if (coitalBehaviorDraw >= jointPVeryLow
					&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {
				setCoitalBehaviorType(CoitalBehaviorTypeEnum.moderateFrequency);
			}
		}
		if (getUnmarriedCode() == -1) {
			setUnmarriedCode(1);
			setMarriedCode(0);
			double coitalBehaviorDraw = getRandom().nextDouble();
			double pCoitalFrequencyVeryLowMarried = pCoitalFrequencyVeryLowMarried();
			double watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried = getMarriedCode()
					* pCoitalFrequencyVeryLowMarried;
			double pCoitalFrequencyVeryLowUnmarried = pCoitalFrequencyVeryLowUnmarried();
			double watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried = getUnmarriedCode()
					* pCoitalFrequencyVeryLowUnmarried;
			double jointPVeryLow = watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried
					+ watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried;
			double pCoitalFrequencyModerateMarried = pCoitalFrequencyModerateMarried();
			double pModerateMarriedCode = pCoitalFrequencyModerateMarried
					* getMarriedCode();
			double pCoitalFrequencyModerateUnmarried = pCoitalFrequencyModerateUnmarried();
			double pModerateUnmarriedCode = pCoitalFrequencyModerateUnmarried
					* getUnmarriedCode();
			double jointPModerate = pModerateMarriedCode
					+ pModerateUnmarriedCode;
			double pVeryLoworModerate = jointPModerate + jointPVeryLow;
			if (coitalBehaviorDraw >= pVeryLoworModerate) {
				setCoitalBehaviorType(CoitalBehaviorTypeEnum.highFrequency);
			}
			if (coitalBehaviorDraw < jointPVeryLow
					&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {
				setCoitalBehaviorType(CoitalBehaviorTypeEnum.veryLowFrequency);
			}
			if (coitalBehaviorDraw >= jointPVeryLow
					&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {
				setCoitalBehaviorType(CoitalBehaviorTypeEnum.moderateFrequency);
			}
		}
	}

	/**
	 * Calculate P Abortion Married.
	 */
	public double pAbortionMarried() {
		double pAbortionMarriedFactor = 0.0;

		pAbortionMarriedFactor = getFamilyScape()
				.getPAbortionMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarried15to19Factor();
				break;
			case years20to24 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarried20to24Factor();
				break;
			case years25to29 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarried25to29Factor();
				break;
			case years30to44 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedNHSFactor();
				break;
			case pHS :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedPHSFactor();
				break;
			case hS :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedOtherFactor();
				break;
			case black :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedBlackFactor();
				break;
			case hispanic :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedHispanicFactor();
				break;
			case white :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedCategory1Factor();
				break;
			case cat3 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedCategory3Factor();
				break;
			case cat2 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedCategory2Factor();
				break;
			case category4 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getFamilyScape().getPAbortionMarriedCategory4Factor();
				break;
		}
		return pAbortionMarriedFactor;
	}

	/**
	 * Calculate P Miscarriage Married.
	 */
	public double pMiscarriageMarried() {
		double pMiscarriageMarriedFactor = 0.0;

		pMiscarriageMarriedFactor = getFamilyScape()
				.getPMiscarriageMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarried15to19Factor();
				break;
			case years20to24 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarried20to24Factor();
				break;
			case years25to29 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarried25to29Factor();
				break;
			case years30to44 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarriedNHSFactor();
				break;
			case pHS :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarriedPHSFactor();
				break;
			case hS :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarriedOtherFactor();
				break;
			case black :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarriedBlackFactor();
				break;
			case hispanic :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape()
								.getPMiscarriageMarriedHispanicFactor();
				break;
			case white :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape().getPMiscarriageMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape()
								.getPMiscarriageMarriedCategory1Factor();
				break;
			case cat3 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape()
								.getPMiscarriageMarriedCategory3Factor();
				break;
			case cat2 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape()
								.getPMiscarriageMarriedCategory2Factor();
				break;
			case category4 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getFamilyScape()
								.getPMiscarriageMarriedCategory4Factor();
				break;
		}
		return pMiscarriageMarriedFactor;
	}

	/**
	 * Calculate P Coital Frequency Very Low Married.
	 */
	public double pCoitalFrequencyVeryLowMarried() {
		double pCoitalFrequencyVeryLowMarriedFactor = 0.0;

		pCoitalFrequencyVeryLowMarriedFactor = getFamilyScape()
				.getPCoitalFrequencyVeryLowMarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowMarriedCategory4Factor();
				break;
		}
		return pCoitalFrequencyVeryLowMarriedFactor;
	}

	/**
	 * Calculate P Marriage.
	 */
	public double pMarriage() {
		double pMarriageMinimum = 0.0;

		pMarriageMinimum = getFamilyScape().getPMarriageMinimumBase();
		switch (getGender()) {
			case female :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageFemaleMinimum();
				break;
			case male :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageMaleMinimum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriage15to19Minimum();
				break;
			case years20to24 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriage20to24Minimum();
				break;
			case years25to29 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriage25to29Minimum();
				break;
			case years30to44 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriage30to44Minimum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageNHSMinimum();
				break;
			case pHS :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriagePHSMinimum();
				break;
			case hS :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageHSMinimum();
				break;
		}
		switch (getRace()) {
			case other :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageOtherMinimum();
				break;
			case black :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageBlackMinimum();
				break;
			case hispanic :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageHispanicMinimum();
				break;
			case white :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageWhiteMinimum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageCategory1Minimum();
				break;
			case cat3 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageCategory3Minimum();
				break;
			case cat2 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageCategory2Minimum();
				break;
			case category4 :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageCategory4Minimum();
				break;
		}
		switch (getPregnancyStatus()) {
			case notPregnant :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriageNotPregnantMinimum();
				break;
			case pregnant :
				pMarriageMinimum = pMarriageMinimum
						+ getFamilyScape().getPMarriagePregnantMinimum();
				break;
		}
		double pMarriageMaximum = 0.0;

		pMarriageMaximum = getFamilyScape().getPMarriageMaximumBase();
		switch (getGender()) {
			case female :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageFemaleMaximum();
				break;
			case male :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageMaleMaximum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriage15to19Maximum();
				break;
			case years20to24 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriage20to24Maximum();
				break;
			case years25to29 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriage25to29Maximum();
				break;
			case years30to44 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriage30to44Maximum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageNHSMaximum();
				break;
			case pHS :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriagePHSMaximum();
				break;
			case hS :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageHSMaximum();
				break;
		}
		switch (getRace()) {
			case other :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageOtherMaximum();
				break;
			case black :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageBlackMaximum();
				break;
			case hispanic :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageHispanicMaximum();
				break;
			case white :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageWhiteMaximum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageCategory1Maximum();
				break;
			case cat3 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageCategory3Maximum();
				break;
			case cat2 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageCategory2Maximum();
				break;
			case category4 :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageCategory4Maximum();
				break;
		}
		switch (getPregnancyStatus()) {
			case notPregnant :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriageNotPregnantMaximum();
				break;
			case pregnant :
				pMarriageMaximum = pMarriageMaximum
						+ getFamilyScape().getPMarriagePregnantMaximum();
				break;
		}
		return randomInRange(pMarriageMinimum, pMarriageMaximum);
	}

	/**
	 * Calculate P Divorce.
	 */
	public double pDivorce() {
		double pDivorceMinimum = 0.0;

		pDivorceMinimum = getFamilyScape().getPDivorceMinimumBase();
		switch (getGender()) {
			case female :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceFemaleMinimum();
				break;
			case male :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceMaleMinimum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorce15to19Minimum();
				break;
			case years20to24 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorce20to24Minimum();
				break;
			case years25to29 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorce25to29Minimum();
				break;
			case years30to44 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorce30to44Minimum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceNHSMinimum();
				break;
			case pHS :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorcePHSMinimum();
				break;
			case hS :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceHSMinimum();
				break;
		}
		switch (getRace()) {
			case other :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceOtherMinimum();
				break;
			case black :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceBlackMinimum();
				break;
			case hispanic :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceHispanicMinimum();
				break;
			case white :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceWhiteMinimum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceCategory1Minimum();
				break;
			case cat3 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceCategory3Minimum();
				break;
			case cat2 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceCategory2Minimum();
				break;
			case category4 :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceCategory4Minimum();
				break;
		}
		switch (getPregnancyStatusCouple()) {
			case notPregnant :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceNotPregnantMinimum();
				break;
			case pregnant :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorcePregnantMinimum();
				break;
			case notInCouple :
				pDivorceMinimum = pDivorceMinimum
						+ getFamilyScape().getPDivorceNotInCoupleMinimum();
				break;
		}
		double pDivorceMaximum = 0.0;

		pDivorceMaximum = getFamilyScape().getPDivorceMaximumBase();
		switch (getGender()) {
			case female :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceFemaleMaximum();
				break;
			case male :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceMaleMaximum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorce15to19Maximum();
				break;
			case years20to24 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorce20to24Maximum();
				break;
			case years25to29 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorce25to29Maximum();
				break;
			case years30to44 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorce30to44Maximum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceNHSMaximum();
				break;
			case pHS :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorcePHSMaximum();
				break;
			case hS :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceHSMaximum();
				break;
		}
		switch (getRace()) {
			case other :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceOtherMaximum();
				break;
			case black :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceBlackMaximum();
				break;
			case hispanic :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceHispanicMaximum();
				break;
			case white :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceWhiteMaximum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceCategory1Maximum();
				break;
			case cat3 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceCategory3Maximum();
				break;
			case cat2 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceCategory2Maximum();
				break;
			case category4 :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceCategory4Maximum();
				break;
		}
		switch (getPregnancyStatusCouple()) {
			case notPregnant :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceNotPregnantMaximum();
				break;
			case pregnant :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorcePregnantMaximum();
				break;
			case notInCouple :
				pDivorceMaximum = pDivorceMaximum
						+ getFamilyScape().getPDivorceNotInCoupleMaximum();
				break;
		}
		return randomInRange(pDivorceMinimum, pDivorceMaximum);
	}

	/**
	 * Calculate P Sterilize Male Married.
	 */
	public double pSterilizeMaleMarried() {
		double pSterilizeMaleMarriedFactor = 0.0;

		pSterilizeMaleMarriedFactor = getFamilyScape()
				.getPSterilizeMaleMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape().getPSterilizeMaleMarriedNHSFactor();
				break;
			case pHS :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape().getPSterilizeMaleMarriedPHSFactor();
				break;
			case hS :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape().getPSterilizeMaleMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedOtherFactor();
				break;
			case black :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedHispanicFactor();
				break;
			case white :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleMarriedOtherContraceptionFactor();
				break;
		}
		return pSterilizeMaleMarriedFactor;
	}

	/**
	 * Watch for changes in Births in Lifetime.
	 */
	public void birthEvent() {
		double pPoorBirthMarried = pPoorBirthMarried();
		double poorBirthDraw = getRandom().nextDouble();
		double birthEventPPoorBirthMarriedMultiplyMarriedCode = pPoorBirthMarried
				* getMarriedCode();
		double pPoorBirthUnmarried = pPoorBirthUnmarried();
		double birthEventPPoorBirthUnmarriedMultiplyUnmarriedCode = pPoorBirthUnmarried
				* getUnmarriedCode();
		double jointPPoorBirth = birthEventPPoorBirthMarriedMultiplyMarriedCode
				+ birthEventPPoorBirthUnmarriedMultiplyUnmarriedCode;
		if (poorBirthDraw < jointPPoorBirth) {
			int birthEventIncrementPoorBirthsinLifetime = getPoorBirthsinLifetime() + 1;
			setPoorBirthsinLifetime(birthEventIncrementPoorBirthsinLifetime);
		}
	}

	/**
	 * Calculate P Poor Birth Married.
	 */
	public double pPoorBirthMarried() {
		double pPoorBirthMarriedFactor = 0.0;

		pPoorBirthMarriedFactor = getFamilyScape()
				.getPPoorBirthMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarried15to19Factor();
				break;
			case years20to24 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarried20to24Factor();
				break;
			case years25to29 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarried25to29Factor();
				break;
			case years30to44 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedNHSFactor();
				break;
			case pHS :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedPHSFactor();
				break;
			case hS :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedOtherFactor();
				break;
			case black :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedBlackFactor();
				break;
			case hispanic :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedHispanicFactor();
				break;
			case white :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape().getPPoorBirthMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape()
								.getPPoorBirthMarriedCategory1Factor();
				break;
			case cat3 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape()
								.getPPoorBirthMarriedCategory3Factor();
				break;
			case cat2 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape()
								.getPPoorBirthMarriedCategory2Factor();
				break;
			case category4 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getFamilyScape()
								.getPPoorBirthMarriedCategory4Factor();
				break;
		}
		return pPoorBirthMarriedFactor;
	}

	/**
	 * Calculate P Coital Frequency Moderate Married.
	 */
	public double pCoitalFrequencyModerateMarried() {
		double pCoitalFrequencyModerateMarriedFactor = 0.0;

		pCoitalFrequencyModerateMarriedFactor = getFamilyScape()
				.getPCoitalFrequencyModerateMarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateMarriedCategory4Factor();
				break;
		}
		return pCoitalFrequencyModerateMarriedFactor;
	}

	/**
	 * Calculate P Coital Frequency Very Low Unmarried.
	 */
	public double pCoitalFrequencyVeryLowUnmarried() {
		double pCoitalFrequencyVeryLowUnmarriedFactor = 0.0;

		pCoitalFrequencyVeryLowUnmarriedFactor = getFamilyScape()
				.getPCoitalFrequencyVeryLowUnmarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyVeryLowUnmarriedCategory4Factor();
				break;
		}
		return pCoitalFrequencyVeryLowUnmarriedFactor;
	}

	/**
	 * Calculate P Coital Frequency Moderate Unmarried.
	 */
	public double pCoitalFrequencyModerateUnmarried() {
		double pCoitalFrequencyModerateUnmarriedFactor = 0.0;

		pCoitalFrequencyModerateUnmarriedFactor = getFamilyScape()
				.getPCoitalFrequencyModerateUnmarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getFamilyScape()
								.getPCoitalFrequencyModerateUnmarriedCategory4Factor();
				break;
		}
		return pCoitalFrequencyModerateUnmarriedFactor;
	}

	/**
	 * Calculate P Sterilize Female Married.
	 */
	public double pSterilizeFemaleMarried() {
		double pSterilizeFemaleMarriedFactor = 0.0;

		pSterilizeFemaleMarriedFactor = getFamilyScape()
				.getPSterilizeFemaleMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedNHSFactor();
				break;
			case pHS :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedPHSFactor();
				break;
			case hS :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape().getPSterilizeFemaleMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedOtherFactor();
				break;
			case black :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedHispanicFactor();
				break;
			case white :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleMarriedOtherContraceptionFactor();
				break;
		}
		return pSterilizeFemaleMarriedFactor;
	}

	/**
	 * Calculate P Abortion Unmarried.
	 */
	public double pAbortionUnmarried() {
		double pAbortionUnmarriedFactor = 0.0;

		pAbortionUnmarriedFactor = getFamilyScape()
				.getPAbortionUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarried15to19Factor();
				break;
			case years20to24 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarried20to24Factor();
				break;
			case years25to29 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarried25to29Factor();
				break;
			case years30to44 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarriedNHSFactor();
				break;
			case pHS :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarriedPHSFactor();
				break;
			case hS :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarriedOtherFactor();
				break;
			case black :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarriedBlackFactor();
				break;
			case hispanic :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape()
								.getPAbortionUnmarriedHispanicFactor();
				break;
			case white :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape().getPAbortionUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape()
								.getPAbortionUnmarriedCategory1Factor();
				break;
			case cat3 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape()
								.getPAbortionUnmarriedCategory3Factor();
				break;
			case cat2 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape()
								.getPAbortionUnmarriedCategory2Factor();
				break;
			case category4 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getFamilyScape()
								.getPAbortionUnmarriedCategory4Factor();
				break;
		}
		return pAbortionUnmarriedFactor;
	}

	/**
	 * Calculate P Miscarriage Unmarried.
	 */
	public double pMiscarriageUnmarried() {
		double pMiscarriageUnmarriedFactor = 0.0;

		pMiscarriageUnmarriedFactor = getFamilyScape()
				.getPMiscarriageUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarried15to19Factor();
				break;
			case years20to24 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarried20to24Factor();
				break;
			case years25to29 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarried25to29Factor();
				break;
			case years30to44 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape().getPMiscarriageUnmarriedNHSFactor();
				break;
			case pHS :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape().getPMiscarriageUnmarriedPHSFactor();
				break;
			case hS :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape().getPMiscarriageUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedOtherFactor();
				break;
			case black :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedBlackFactor();
				break;
			case hispanic :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedHispanicFactor();
				break;
			case white :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedCategory1Factor();
				break;
			case cat3 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedCategory3Factor();
				break;
			case cat2 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedCategory2Factor();
				break;
			case category4 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getFamilyScape()
								.getPMiscarriageUnmarriedCategory4Factor();
				break;
		}
		return pMiscarriageUnmarriedFactor;
	}

	/**
	 * Calculate P Poor Birth Unmarried.
	 */
	public double pPoorBirthUnmarried() {
		double pPoorBirthUnmarriedFactor = 0.0;

		pPoorBirthUnmarriedFactor = getFamilyScape()
				.getPPoorBirthUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarried15to19Factor();
				break;
			case years20to24 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarried20to24Factor();
				break;
			case years25to29 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarried25to29Factor();
				break;
			case years30to44 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarriedNHSFactor();
				break;
			case pHS :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarriedPHSFactor();
				break;
			case hS :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarriedOtherFactor();
				break;
			case black :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarriedBlackFactor();
				break;
			case hispanic :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape()
								.getPPoorBirthUnmarriedHispanicFactor();
				break;
			case white :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape().getPPoorBirthUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape()
								.getPPoorBirthUnmarriedCategory1Factor();
				break;
			case cat3 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape()
								.getPPoorBirthUnmarriedCategory3Factor();
				break;
			case cat2 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape()
								.getPPoorBirthUnmarriedCategory2Factor();
				break;
			case category4 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getFamilyScape()
								.getPPoorBirthUnmarriedCategory4Factor();
				break;
		}
		return pPoorBirthUnmarriedFactor;
	}

	/**
	 * Watch for changes in P Sex.
	 */
	public void watchPSex() {
		if (getMaritalStatus() == MaritalStatusEnum.married) {
			setPSexInitial(getPSex());
		}
		if (!(getMaritalStatus() == MaritalStatusEnum.married)) {
			double watchPSexPSexMultiplyCoitalFrequencyInitialModification = getPSex()
					* getFamilyScape().getCoitalFrequencyInitialModification();
			setPSexInitial(watchPSexPSexMultiplyCoitalFrequencyInitialModification);
		}
	}

	/**
	 * Calculate P Sterilize Male Unmarried.
	 */
	public double pSterilizeMaleUnmarried() {
		double pSterilizeMaleUnmarriedFactor = 0.0;

		pSterilizeMaleUnmarriedFactor = getFamilyScape()
				.getPSterilizeMaleUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedNHSFactor();
				break;
			case pHS :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedPHSFactor();
				break;
			case hS :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape().getPSterilizeMaleUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedOtherFactor();
				break;
			case black :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedHispanicFactor();
				break;
			case white :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeMaleUnmarriedOtherContraceptionFactor();
				break;
		}
		return pSterilizeMaleUnmarriedFactor;
	}

	/**
	 * Calculate P Sterilize Female Unmarried.
	 */
	public double pSterilizeFemaleUnmarried() {
		double pSterilizeFemaleUnmarriedFactor = 0.0;

		pSterilizeFemaleUnmarriedFactor = getFamilyScape()
				.getPSterilizeFemaleUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedNHSFactor();
				break;
			case pHS :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedPHSFactor();
				break;
			case hS :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedOtherFactor();
				break;
			case black :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedHispanicFactor();
				break;
			case white :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getFamilyScape()
								.getPSterilizeFemaleUnmarriedOtherContraceptionFactor();
				break;
		}
		return pSterilizeFemaleUnmarriedFactor;
	}

	/**
	 * Calculate P Pill Use Unmarried.
	 */
	public double pPillUseUnmarried() {
		double pPillUseUnmarriedFactor = 0.0;

		pPillUseUnmarriedFactor = getFamilyScape()
				.getPPillUseUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarried15to19Factor();
				break;
			case years20to24 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarried20to24Factor();
				break;
			case years25to29 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarried25to29Factor();
				break;
			case years30to44 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedNHSFactor();
				break;
			case pHS :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedPHSFactor();
				break;
			case hS :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedOtherFactor();
				break;
			case black :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedBlackFactor();
				break;
			case hispanic :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedHispanicFactor();
				break;
			case white :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape().getPPillUseUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedCategory1Factor();
				break;
			case cat3 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedCategory3Factor();
				break;
			case cat2 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedCategory2Factor();
				break;
			case category4 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getFamilyScape()
								.getPPillUseUnmarriedOtherContraceptionFactor();
				break;
		}
		return pPillUseUnmarriedFactor;
	}

	/**
	 * Watch for changes in Coital Behavior Type.
	 */
	public void watchCoitalBehaviorType() {
		if (true && getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {
			double contraceptionUseDraw = getRandom().nextDouble();
			if (getGender() == GenderEnum.female) {
				double pPillUseMarried = pPillUseMarried();
				double watchCoitalBehaviorTypePPillUseMarriedMultiplyMarriedCode = pPillUseMarried
						* getMarriedCode();
				double pPillUseUnmarried = pPillUseUnmarried();
				double watchCoitalBehaviorTypePPillUseUnmarriedMultiplyUnmarriedCode = pPillUseUnmarried
						* getUnmarriedCode();
				double jointPUseProbability = watchCoitalBehaviorTypePPillUseMarriedMultiplyMarriedCode
						+ watchCoitalBehaviorTypePPillUseUnmarriedMultiplyUnmarriedCode;
				if (contraceptionUseDraw < jointPUseProbability) {
					setContraceptionMethod(ContraceptionMethodEnum.pill);
				}
				if (!(contraceptionUseDraw < jointPUseProbability)) {
					setContraceptionMethod(ContraceptionMethodEnum.none);
				}
			}
			if (getGender() == GenderEnum.male) {
				double pHighCondomUseMarried = pHighCondomUseMarried();
				double watchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCode = pHighCondomUseMarried
						* getMarriedCode();
				double pHighCondomUseUnmarried = pHighCondomUseUnmarried();
				double watchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode = pHighCondomUseUnmarried
						* getUnmarriedCode();
				double watchCoitalBehaviorTypeWatchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCodeAddWatchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode = watchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCode
						+ watchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode;
				if (contraceptionUseDraw < watchCoitalBehaviorTypeWatchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCodeAddWatchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode) {
					setContraceptionMethod(ContraceptionMethodEnum.condomHighIntender);
				}
				if (!(contraceptionUseDraw < watchCoitalBehaviorTypeWatchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCodeAddWatchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode)) {
					double pMediumCondomUseMarried = pMediumCondomUseMarried();
					double watchCoitalBehaviorTypePMediumCondomUseMarriedMultiplyMarriedCode = pMediumCondomUseMarried
							* getMarriedCode();
					double pMediumCondomUseUnmarried = pMediumCondomUseUnmarried();
					double pMediumCondomUseUnmarriedCode = pMediumCondomUseUnmarried
							* getUnmarriedCode();
					double jointMediumProbability = watchCoitalBehaviorTypePMediumCondomUseMarriedMultiplyMarriedCode
							+ pMediumCondomUseUnmarriedCode;
					if (contraceptionUseDraw < jointMediumProbability) {
						setContraceptionMethod(ContraceptionMethodEnum.condomMediumIntender);
					}
					if (!(contraceptionUseDraw < jointMediumProbability)) {
						setContraceptionMethod(ContraceptionMethodEnum.none);
					}
				}
			}
		}
		if (getMaritalStatus() == MaritalStatusEnum.married) {
			double coitalDaysMarried = coitalDaysMarried();
			double watchCoitalBehaviorTypeCoitalDaysMarriedDivideLunarDays = coitalDaysMarried
					/ getFamilyScape().getLunarDays();
			setPSex(watchCoitalBehaviorTypeCoitalDaysMarriedDivideLunarDays);
		}
		if (getMaritalStatus() != MaritalStatusEnum.married) {
			double coitalDaysUnmarried = coitalDaysUnmarried();
			double watchCoitalBehaviorTypeCoitalDaysUnmarriedDivideLunarDays = coitalDaysUnmarried
					/ getFamilyScape().getLunarDays();
			setPSex(watchCoitalBehaviorTypeCoitalDaysUnmarriedDivideLunarDays);
		}
	}

	/**
	 * Calculate P Pill Use Married.
	 */
	public double pPillUseMarried() {
		double pPillUseMarriedFactor = 0.0;

		pPillUseMarriedFactor = getFamilyScape().getPPillUseMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarried15to19Factor();
				break;
			case years20to24 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarried20to24Factor();
				break;
			case years25to29 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarried25to29Factor();
				break;
			case years30to44 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedNHSFactor();
				break;
			case pHS :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedPHSFactor();
				break;
			case hS :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedOtherFactor();
				break;
			case black :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedBlackFactor();
				break;
			case hispanic :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedHispanicFactor();
				break;
			case white :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedCategory1Factor();
				break;
			case cat3 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedCategory3Factor();
				break;
			case cat2 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedCategory2Factor();
				break;
			case category4 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape().getPPillUseMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape()
								.getPPillUseMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape()
								.getPPillUseMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape()
								.getPPillUseMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape()
								.getPPillUseMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getFamilyScape()
								.getPPillUseMarriedOtherContraceptionFactor();
				break;
		}
		return pPillUseMarriedFactor;
	}

	/**
	 * Calculate P High Condom Use Married.
	 */
	public double pHighCondomUseMarried() {
		double pHighCondomUseMarriedFactor = 0.0;

		pHighCondomUseMarriedFactor = getFamilyScape()
				.getPHighCondomUseMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarried15to19Factor();
				break;
			case years20to24 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarried20to24Factor();
				break;
			case years25to29 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarried25to29Factor();
				break;
			case years30to44 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape().getPHighCondomUseMarriedNHSFactor();
				break;
			case pHS :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape().getPHighCondomUseMarriedPHSFactor();
				break;
			case hS :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape().getPHighCondomUseMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedOtherFactor();
				break;
			case black :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedBlackFactor();
				break;
			case hispanic :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedHispanicFactor();
				break;
			case white :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedCategory1Factor();
				break;
			case cat3 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedCategory3Factor();
				break;
			case cat2 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedCategory2Factor();
				break;
			case category4 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedCategory4Factor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedOtherContraceptionFactor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseMarriedModerateFrequencyFactor();
				break;
		}
		return pHighCondomUseMarriedFactor;
	}

	/**
	 * Calculate P Medium Condom Use Unmarried.
	 */
	public double pMediumCondomUseUnmarried() {
		double pMediumCondomUseUnmarriedFactor = 0.0;

		pMediumCondomUseUnmarriedFactor = getFamilyScape()
				.getPMediumCondomUseUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarried15to19Factor();
				break;
			case years20to24 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarried20to24Factor();
				break;
			case years25to29 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarried25to29Factor();
				break;
			case years30to44 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedNHSFactor();
				break;
			case pHS :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedPHSFactor();
				break;
			case hS :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedOtherFactor();
				break;
			case black :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedBlackFactor();
				break;
			case hispanic :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedHispanicFactor();
				break;
			case white :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedCategory1Factor();
				break;
			case cat3 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedCategory3Factor();
				break;
			case cat2 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedCategory2Factor();
				break;
			case category4 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseUnmarriedOtherContraceptionFactor();
				break;
		}
		return pMediumCondomUseUnmarriedFactor;
	}

	/**
	 * Calculate P High Condom Use Unmarried.
	 */
	public double pHighCondomUseUnmarried() {
		double pHighCondomUseUnmarriedFactor = 0.0;

		pHighCondomUseUnmarriedFactor = getFamilyScape()
				.getPHighCondomUseUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarried15to19Factor();
				break;
			case years20to24 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarried20to24Factor();
				break;
			case years25to29 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarried25to29Factor();
				break;
			case years30to44 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedNHSFactor();
				break;
			case pHS :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedPHSFactor();
				break;
			case hS :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape().getPHighCondomUseUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedOtherFactor();
				break;
			case black :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedBlackFactor();
				break;
			case hispanic :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedHispanicFactor();
				break;
			case white :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedCategory1Factor();
				break;
			case cat3 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedCategory3Factor();
				break;
			case cat2 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedCategory2Factor();
				break;
			case category4 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getFamilyScape()
								.getPHighCondomUseUnmarriedOtherContraceptionFactor();
				break;
		}
		return pHighCondomUseUnmarriedFactor;
	}

	/**
	 * Calculate P Medium Condom Use Married.
	 */
	public double pMediumCondomUseMarried() {
		double pMediumCondomUseMarriedFactor = 0.0;

		pMediumCondomUseMarriedFactor = getFamilyScape()
				.getPMediumCondomUseMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarried15to19Factor();
				break;
			case years20to24 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarried20to24Factor();
				break;
			case years25to29 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarried25to29Factor();
				break;
			case years30to44 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedNHSFactor();
				break;
			case pHS :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedPHSFactor();
				break;
			case hS :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape().getPMediumCondomUseMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedOtherFactor();
				break;
			case black :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedBlackFactor();
				break;
			case hispanic :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedHispanicFactor();
				break;
			case white :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedCategory1Factor();
				break;
			case cat3 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedCategory3Factor();
				break;
			case cat2 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedCategory2Factor();
				break;
			case category4 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getFamilyScape()
								.getPMediumCondomUseMarriedOtherContraceptionFactor();
				break;
		}
		return pMediumCondomUseMarriedFactor;
	}

	/**
	 * Watch for changes in Gender.
	 */
	public void watchGender() {
		if (getGender() == GenderEnum.female) {
			setFemaleCode(1);
			setMaleCode(0);
		}
		if (!(getGender() == GenderEnum.female)) {
			setFemaleCode(0);
			setMaleCode(1);
		}
	}

	/**
	 * Calculate Coital Days Married.
	 */
	public double coitalDaysMarried() {
		double coitalDaysMarriedMinimum = 0.0;

		coitalDaysMarriedMinimum = getFamilyScape()
				.getCoitalDaysMarriedMinimumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysMarriedMinimum = coitalDaysMarriedMinimum
						+ getFamilyScape()
								.getCoitalDaysMarriedVeryLowFrequencyMinimum();
				break;
			case highFrequency :
				coitalDaysMarriedMinimum = coitalDaysMarriedMinimum
						+ getFamilyScape()
								.getCoitalDaysMarriedHighFrequencyMinimum();
				break;
			case moderateFrequency :
				coitalDaysMarriedMinimum = coitalDaysMarriedMinimum
						+ getFamilyScape()
								.getCoitalDaysMarriedModerateFrequencyMinimum();
				break;
		}
		double coitalDaysMarriedMaximum = 0.0;

		coitalDaysMarriedMaximum = getFamilyScape()
				.getCoitalDaysMarriedMaximumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysMarriedMaximum = coitalDaysMarriedMaximum
						+ getFamilyScape()
								.getCoitalDaysMarriedVeryLowFrequencyMaximum();
				break;
			case highFrequency :
				coitalDaysMarriedMaximum = coitalDaysMarriedMaximum
						+ getFamilyScape()
								.getCoitalDaysMarriedHighFrequencyMaximum();
				break;
			case moderateFrequency :
				coitalDaysMarriedMaximum = coitalDaysMarriedMaximum
						+ getFamilyScape()
								.getCoitalDaysMarriedModerateFrequencyMaximum();
				break;
		}
		return randomInRange(coitalDaysMarriedMinimum, coitalDaysMarriedMaximum);
	}

	/**
	 * Calculate Coital Days Unmarried.
	 */
	public double coitalDaysUnmarried() {
		double coitalDaysUnmarriedMinimum = 0.0;

		coitalDaysUnmarriedMinimum = getFamilyScape()
				.getCoitalDaysUnmarriedMinimumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysUnmarriedMinimum = coitalDaysUnmarriedMinimum
						+ getFamilyScape()
								.getCoitalDaysUnmarriedVeryLowFrequencyMinimum();
				break;
			case highFrequency :
				coitalDaysUnmarriedMinimum = coitalDaysUnmarriedMinimum
						+ getFamilyScape()
								.getCoitalDaysUnmarriedHighFrequencyMinimum();
				break;
			case moderateFrequency :
				coitalDaysUnmarriedMinimum = coitalDaysUnmarriedMinimum
						+ getFamilyScape()
								.getCoitalDaysUnmarriedModerateFrequencyMinimum();
				break;
		}
		double coitalDaysUnmarriedMaximum = 0.0;

		coitalDaysUnmarriedMaximum = getFamilyScape()
				.getCoitalDaysUnmarriedMaximumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysUnmarriedMaximum = coitalDaysUnmarriedMaximum
						+ getFamilyScape()
								.getCoitalDaysUnmarriedVeryLowFrequencyMaximum();
				break;
			case highFrequency :
				coitalDaysUnmarriedMaximum = coitalDaysUnmarriedMaximum
						+ getFamilyScape()
								.getCoitalDaysUnmarriedHighFrequencyMaximum();
				break;
			case moderateFrequency :
				coitalDaysUnmarriedMaximum = coitalDaysUnmarriedMaximum
						+ getFamilyScape()
								.getCoitalDaysUnmarriedModerateFrequencyMaximum();
				break;
		}
		return randomInRange(coitalDaysUnmarriedMinimum,
				coitalDaysUnmarriedMaximum);
	}

	/**
	 * Calculate P Rhythm Method.
	 */
	public double pRhythmMethod() {
		double pRhythmMethod = 0.0;
		if (getMaritalStatus() == MaritalStatusEnum.married) {
			if (getContraceptionMethod() == ContraceptionMethodEnum.none) {
				pRhythmMethod = getFamilyScape().getPRhythmMethodMarriedNone();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodMarriedSterilized();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.pill) {
				pRhythmMethod = getFamilyScape().getPRhythmMethodMarriedPill();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodMarriedCondomMediumIntender();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodMarriedCondomHighIntender();
			}
		} else if (getMaritalStatus() == MaritalStatusEnum.single) {
			if (getContraceptionMethod() == ContraceptionMethodEnum.none) {
				pRhythmMethod = getFamilyScape().getPRhythmMethodSingleNone();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodSingleSterilized();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.pill) {
				pRhythmMethod = getFamilyScape().getPRhythmMethodSinglePill();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodSingleCondomMediumIntender();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodSingleCondomHighIntender();
			}
		} else if (getMaritalStatus() == MaritalStatusEnum.divorced) {
			if (getContraceptionMethod() == ContraceptionMethodEnum.none) {
				pRhythmMethod = getFamilyScape().getPRhythmMethodDivorcedNone();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodDivorcedSterilized();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.pill) {
				pRhythmMethod = getFamilyScape().getPRhythmMethodDivorcedPill();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodDivorcedCondomMediumIntender();
			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender) {
				pRhythmMethod = getFamilyScape()
						.getPRhythmMethodDivorcedCondomHighIntender();
			}
		}
		return pRhythmMethod;
	}

	/**
	 * Watch for changes in Contraception Method.
	 */
	public void watchContraceptionMethod() {
		if (getGender() == GenderEnum.female) {
			double pRhythmMethod = pRhythmMethod();
			double rhythmMethodDraw = getRandom().nextDouble();
			if (rhythmMethodDraw < pRhythmMethod) {
				setRhythmMethodUser(true);
			}
			if (!(rhythmMethodDraw < pRhythmMethod)) {
				setRhythmMethodUser(false);
			}
		}
	}

	/**
	 * Calculate P Pill Failure.
	 */
	public double pPillFailure() {
		double pPillFailureFactor = 0.0;

		pPillFailureFactor = getFamilyScape().getPPillFailureFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailure15to19Factor();
				break;
			case years20to24 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailure20to24Factor();
				break;
			case years25to29 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailure25to29Factor();
				break;
			case years30to44 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailure30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureNHSFactor();
				break;
			case pHS :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailurePHSFactor();
				break;
			case hS :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureHSFactor();
				break;
		}
		switch (getMaritalStatus()) {
			case married :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureMarriedFactor();
				break;
			case single :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureSingleFactor();
				break;
			case divorced :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureDivorcedFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureOtherFactor();
				break;
			case black :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureBlackFactor();
				break;
			case hispanic :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureHispanicFactor();
				break;
			case white :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureCategory1Factor();
				break;
			case cat3 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureCategory3Factor();
				break;
			case cat2 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureCategory2Factor();
				break;
			case category4 :
				pPillFailureFactor = pPillFailureFactor
						+ getFamilyScape().getPPillFailureCategory4Factor();
				break;
		}
		return pPillFailureFactor;
	}

	/**
	 * Calculate P Pill Condom Failure.
	 */
	public double pPillCondomFailure() {
		double pPillCondomFailureFactor = 0.0;

		pPillCondomFailureFactor = getFamilyScape()
				.getPPillCondomFailureFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailure15to19Factor();
				break;
			case years20to24 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailure20to24Factor();
				break;
			case years25to29 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailure25to29Factor();
				break;
			case years30to44 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailure30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureNHSFactor();
				break;
			case pHS :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailurePHSFactor();
				break;
			case hS :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureHSFactor();
				break;
		}
		switch (getMaritalStatus()) {
			case married :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureMarriedFactor();
				break;
			case single :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureSingleFactor();
				break;
			case divorced :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape()
								.getPPillCondomFailureDivorcedFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureOtherFactor();
				break;
			case black :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureBlackFactor();
				break;
			case hispanic :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape()
								.getPPillCondomFailureHispanicFactor();
				break;
			case white :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape().getPPillCondomFailureWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape()
								.getPPillCondomFailureCategory1Factor();
				break;
			case cat3 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape()
								.getPPillCondomFailureCategory3Factor();
				break;
			case cat2 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape()
								.getPPillCondomFailureCategory2Factor();
				break;
			case category4 :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getFamilyScape()
								.getPPillCondomFailureCategory4Factor();
				break;
		}
		return pPillCondomFailureFactor;
	}

	/**
	 * Calculate P Condom Failure.
	 */
	public double pCondomFailure() {
		double pCondomFailureFactor = 0.0;

		pCondomFailureFactor = getFamilyScape().getPCondomFailureFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailure15to19Factor();
				break;
			case years20to24 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailure20to24Factor();
				break;
			case years25to29 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailure25to29Factor();
				break;
			case years30to44 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailure30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureNHSFactor();
				break;
			case pHS :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailurePHSFactor();
				break;
			case hS :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureHSFactor();
				break;
		}
		switch (getMaritalStatus()) {
			case married :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureMarriedFactor();
				break;
			case single :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureSingleFactor();
				break;
			case divorced :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureDivorcedFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureOtherFactor();
				break;
			case black :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureBlackFactor();
				break;
			case hispanic :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureHispanicFactor();
				break;
			case white :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureCategory1Factor();
				break;
			case cat3 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureCategory3Factor();
				break;
			case cat2 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureCategory2Factor();
				break;
			case category4 :
				pCondomFailureFactor = pCondomFailureFactor
						+ getFamilyScape().getPCondomFailureCategory4Factor();
				break;
		}
		return pCondomFailureFactor;
	}

	/**
	 * Update Marital Probabilities.
	 */
	public void updateMaritalProbabilities() {
		double pDivorce = pDivorce();
		double pMarriage = pMarriage();
		double adjustedDailyPDivorce = pDivorce
				* getFamilyScape().getPDivorceYearlytoDailyConversion();
		setPDivorce(adjustedDailyPDivorce);
		double adjustedDailyPMarriage = pMarriage
				* getFamilyScape().getPMarriageYearlytoDailyConversion();
		setPMarriage(adjustedDailyPMarriage);
	}

	/**
	 * Pregnancy Begin.
	 */
	public void pregnancyBegin() {
		setPregnancyStatus(PregnancyStatusEnum.pregnant);
		int incrementPregnancies = getPregnanciesinLifetime() + 1;
		int dayofPregnancy = getScape().getPeriod();
		setPregnancyStatusCouple(PregnancyStatusCoupleEnum.pregnant);
		updateMaritalProbabilities();
		Conditional updateFatherRelationship2Condition = new Conditional() {
			private static final long serialVersionUID = 6846144446402098985L;
			public boolean meetsCondition(Object updateFatherRelationship2Cell) {
				if (updateFatherRelationship2Cell instanceof Adult) {
					return true;
				} else {
					return false;
				}
			}
		};
		Adult updateFatherRelationship2 = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
				.getPartners().getSpace()).findRandomNeighbor(this,
				updateFatherRelationship2Condition);
		if (updateFatherRelationship2 != null) {
			updateFatherRelationship2
					.setPregnancyStatusCouple(PregnancyStatusCoupleEnum.pregnant);
			updateFatherRelationship2.updateMaritalProbabilities();
		}
		setPregnanciesinLifetime(incrementPregnancies);
		int pregnanciesoverSexinLifetimeCopy = getPregnanciesinLifetime()
				/ incrementPregnancies;
		setRatioPregnanciestoSexEvents(pregnanciesoverSexinLifetimeCopy);
		double outcomeDraw = getRandom().nextDouble();
		double pAbortionMarried = pAbortionMarried();
		double pregnancyEventPAbortionMarriedMultiplyMarriedCode = pAbortionMarried
				* getMarriedCode();
		double pAbortionUnmarried = pAbortionUnmarried();
		double pregnancyEventPAbortionUnmarriedMultiplyUnmarriedCode = pAbortionUnmarried
				* getUnmarriedCode();
		double jointPAbortion = pregnancyEventPAbortionMarriedMultiplyMarriedCode
				+ pregnancyEventPAbortionUnmarriedMultiplyUnmarriedCode;
		if (outcomeDraw < jointPAbortion) {
			int randomDayinTypicalAbortionPeriod = randomInRange(
					getFamilyScape().getTypicalAbortionPeriodStart(),
					getFamilyScape().getTypicalAbortionPeriodEnd());
			int projectedAbortionDay = dayofPregnancy
					+ randomDayinTypicalAbortionPeriod;
			setProjectedDayofAbortion(projectedAbortionDay);
		}
		if (!(outcomeDraw < jointPAbortion)) {
			double pMiscarriageMarried = pMiscarriageMarried();
			double pregnancyEventPMiscarriageMarriedMultiplyMarriedCode = pMiscarriageMarried
					* getMarriedCode();
			double pMiscarriageUnmarried = pMiscarriageUnmarried();
			double pregnancyEventPMiscarriageUnmarriedMultiplyUnmarriedCode = pMiscarriageUnmarried
					* getUnmarriedCode();
			double jointPMiscarriage = pregnancyEventPMiscarriageMarriedMultiplyMarriedCode
					+ pregnancyEventPMiscarriageUnmarriedMultiplyUnmarriedCode;
			double jointPMiscarriageorAbortion = jointPAbortion
					+ jointPMiscarriage;
			if (outcomeDraw < jointPMiscarriageorAbortion) {
				int randomDayinMisscarriagePeriod = randomInRange(1,
						getFamilyScape().getTypicalBirthPeriodEnd());
				int projectedMiscarriageOccuranceDay = dayofPregnancy
						+ randomDayinMisscarriagePeriod;
				setProjectedDayofMiscarriage(projectedMiscarriageOccuranceDay);
			}
			if (!(outcomeDraw < jointPMiscarriageorAbortion)) {
				int randomDayinBirthPeriod = randomInRange(getFamilyScape()
						.getTypicalBirthPeriodStart(), getFamilyScape()
						.getTypicalBirthPeriodEnd());
				int projectedPregnancyDay = dayofPregnancy
						+ randomDayinBirthPeriod;
				setProjectedDayofBirth(projectedPregnancyDay);
			}
		}
	}

	/**
	 * Pregnancy End.
	 */
	public void pregnancyEnd() {
		setPregnancyStatus(PregnancyStatusEnum.notPregnant);
		setPregnancyStatusCouple(PregnancyStatusCoupleEnum.notPregnant);
		updateMaritalProbabilities();
		Conditional updateFatherRelationshipCondition = new Conditional() {
			private static final long serialVersionUID = 6846144446402098985L;
			public boolean meetsCondition(Object updateFatherRelationshipCell) {
				if (updateFatherRelationshipCell instanceof Adult) {
					return true;
				} else {
					return false;
				}
			}
		};
		Adult updateFatherRelationship = (Adult) ((org.ascape.model.space.Discrete) getFamilyScape()
				.getPartners().getSpace()).findRandomNeighbor(this,
				updateFatherRelationshipCondition);
		if (updateFatherRelationship != null) {
			updateFatherRelationship
					.setPregnancyStatusCouple(PregnancyStatusCoupleEnum.notPregnant);
			updateFatherRelationship.updateMaritalProbabilities();
		}
	}
	/**
	 * Gets the Gender property for Adult.
	 * @return 
	 */
	public GenderEnum getGender() {
		return gender;
	}

	/**
	 * Sets the Gender property for Adult.
	 * 
	 * @param _gender the new Gender value
	 */
	public void setGender(GenderEnum _gender) {
		gender = _gender;
		watchGender();
	}

	/**
	 * Gets the Age in Years property for Adult.
	 * @return 
	 */
	public int getAgeinYears() {
		return ageinYears;
	}

	/**
	 * Sets the Age in Years property for Adult.
	 * 
	 * @param _ageinYears the new Age in Years value
	 */
	public void setAgeinYears(int _ageinYears) {
		ageinYears = _ageinYears;
	}

	/**
	 * Gets the Age in Years Index property for Adult.
	 * @return 
	 */
	public int getAgeinYearsIndex() {
		return ageinYearsIndex;
	}

	/**
	 * Sets the Age in Years Index property for Adult.
	 * 
	 * @param _ageinYearsIndex the new Age in Years Index value
	 */
	public void setAgeinYearsIndex(int _ageinYearsIndex) {
		ageinYearsIndex = _ageinYearsIndex;
	}

	/**
	 * Gets the Age Group property for Adult.
	 * @return 
	 */
	public AgeGroupEnum getAgeGroup() {
		return ageGroup;
	}

	/**
	 * Sets the Age Group property for Adult.
	 * 
	 * @param _ageGroup the new Age Group value
	 */
	public void setAgeGroup(AgeGroupEnum _ageGroup) {
		ageGroup = _ageGroup;
	}

	/**
	 * Gets the Education property for Adult.
	 * @return 
	 */
	public EducationEnum getEducation() {
		return education;
	}

	/**
	 * Sets the Education property for Adult.
	 * 
	 * @param _education the new Education value
	 */
	public void setEducation(EducationEnum _education) {
		education = _education;
	}

	/**
	 * Gets the In Relationship property for Adult.
	 * @return 
	 */
	public boolean isInRelationship() {
		return inRelationship;
	}

	/**
	 * Sets the In Relationship property for Adult.
	 * 
	 * @param _inRelationship the new In Relationship value
	 */
	public void setInRelationship(boolean _inRelationship) {
		inRelationship = _inRelationship;
		watchInRelationship();
	}

	/**
	 * Gets the Marital Status property for Adult.
	 * @return 
	 */
	public MaritalStatusEnum getMaritalStatus() {
		return maritalStatus;
	}

	/**
	 * Sets the Marital Status property for Adult.
	 * 
	 * @param _maritalStatus the new Marital Status value
	 */
	public void setMaritalStatus(MaritalStatusEnum _maritalStatus) {
		maritalStatus = _maritalStatus;
	}

	/**
	 * Gets the Contraception Method property for Adult.
	 * @return 
	 */
	public ContraceptionMethodEnum getContraceptionMethod() {
		return contraceptionMethod;
	}

	/**
	 * Sets the Contraception Method property for Adult.
	 * 
	 * @param _contraceptionMethod the new Contraception Method value
	 */
	public void setContraceptionMethod(
			ContraceptionMethodEnum _contraceptionMethod) {
		contraceptionMethod = _contraceptionMethod;
		watchContraceptionMethod();
	}

	/**
	 * Gets the Rhythm Method User property for Adult.
	 * @return 
	 */
	public boolean isRhythmMethodUser() {
		return rhythmMethodUser;
	}

	/**
	 * Sets the Rhythm Method User property for Adult.
	 * 
	 * @param _rhythmMethodUser the new Rhythm Method User value
	 */
	public void setRhythmMethodUser(boolean _rhythmMethodUser) {
		rhythmMethodUser = _rhythmMethodUser;
	}

	/**
	 * Gets the Projected Day of Birth property for Adult.
	 * @return 
	 */
	public int getProjectedDayofBirth() {
		return projectedDayofBirth;
	}

	/**
	 * Sets the Projected Day of Birth property for Adult.
	 * 
	 * @param _projectedDayofBirth the new Projected Day of Birth value
	 */
	public void setProjectedDayofBirth(int _projectedDayofBirth) {
		projectedDayofBirth = _projectedDayofBirth;
	}

	/**
	 * Gets the Projected Day of Miscarriage property for Adult.
	 * @return The day on which last miscarriage occurs or will occur. Zero if no such event.
	 */
	public int getProjectedDayofMiscarriage() {
		return projectedDayofMiscarriage;
	}

	/**
	 * Sets the Projected Day of Miscarriage property for Adult.
	 * The day on which last miscarriage occurs or will occur. Zero if no such event.
	 * @param _projectedDayofMiscarriage the new Projected Day of Miscarriage value
	 */
	public void setProjectedDayofMiscarriage(int _projectedDayofMiscarriage) {
		projectedDayofMiscarriage = _projectedDayofMiscarriage;
	}

	/**
	 * Gets the Projected Day of Abortion property for Adult.
	 * @return The day on which last abortion occurred or will occur. Zero if no such event.
	 */
	public int getProjectedDayofAbortion() {
		return projectedDayofAbortion;
	}

	/**
	 * Sets the Projected Day of Abortion property for Adult.
	 * The day on which last abortion occurred or will occur. Zero if no such event.
	 * @param _projectedDayofAbortion the new Projected Day of Abortion value
	 */
	public void setProjectedDayofAbortion(int _projectedDayofAbortion) {
		projectedDayofAbortion = _projectedDayofAbortion;
	}

	/**
	 * Gets the P Relationship Initial property for Adult.
	 * @return My desire to enter into a relationship with a member of the opposite sex, given that I am not currently in a relationship. 
	 */
	public double getPRelationshipInitial() {
		return pRelationshipInitial;
	}

	/**
	 * Sets the P Relationship Initial property for Adult.
	 * My desire to enter into a relationship with a member of the opposite sex, given that I am not currently in a relationship. 
	 * @param _pRelationshipInitial the new P Relationship Initial value
	 */
	public void setPRelationshipInitial(double _pRelationshipInitial) {
		pRelationshipInitial = _pRelationshipInitial;
	}

	/**
	 * Gets the P End Relationship property for Adult.
	 * @return Given that I am currently in a relationship, the likelihood that I wish to remain in that relationship for the current period.
	 */
	public double getPEndRelationship() {
		return pEndRelationship;
	}

	/**
	 * Sets the P End Relationship property for Adult.
	 * Given that I am currently in a relationship, the likelihood that I wish to remain in that relationship for the current period.
	 * @param _pEndRelationship the new P End Relationship value
	 */
	public void setPEndRelationship(double _pEndRelationship) {
		pEndRelationship = _pEndRelationship;
	}

	/**
	 * Gets the P Marriage property for Adult.
	 * @return The probability that this agent will become married on a given day, ignoring pregnancy status.
	 */
	public double getPMarriage() {
		return pMarriage;
	}

	/**
	 * Sets the P Marriage property for Adult.
	 * The probability that this agent will become married on a given day, ignoring pregnancy status.
	 * @param _pMarriage the new P Marriage value
	 */
	public void setPMarriage(double _pMarriage) {
		pMarriage = _pMarriage;
	}

	/**
	 * Gets the P Divorce property for Adult.
	 * @return 
	 */
	public double getPDivorce() {
		return pDivorce;
	}

	/**
	 * Sets the P Divorce property for Adult.
	 * 
	 * @param _pDivorce the new P Divorce value
	 */
	public void setPDivorce(double _pDivorce) {
		pDivorce = _pDivorce;
	}

	/**
	 * Gets the P Sex property for Adult.
	 * @return Given that I am in a relationship with a partner with whom I have not had sex, the likilihood that I wish to engage in sex with that partner during given period.
	 */
	public double getPSex() {
		return pSex;
	}

	/**
	 * Sets the P Sex property for Adult.
	 * Given that I am in a relationship with a partner with whom I have not had sex, the likilihood that I wish to engage in sex with that partner during given period.
	 * @param _pSex the new P Sex value
	 */
	public void setPSex(double _pSex) {
		pSex = _pSex;
		watchPSex();
	}

	/**
	 * Gets the P Sex Initial property for Adult.
	 * @return Given that I continue in a relationship with whom I've had sex, the likilihood that I wish to engage in sex with that same partner during given period.
	 */
	public double getPSexInitial() {
		return pSexInitial;
	}

	/**
	 * Sets the P Sex Initial property for Adult.
	 * Given that I continue in a relationship with whom I've had sex, the likilihood that I wish to engage in sex with that same partner during given period.
	 * @param _pSexInitial the new P Sex Initial value
	 */
	public void setPSexInitial(double _pSexInitial) {
		pSexInitial = _pSexInitial;
	}

	/**
	 * Gets the Sex Count in Relationship property for Adult.
	 * @return 
	 */
	public int getSexCountinRelationship() {
		return sexCountinRelationship;
	}

	/**
	 * Sets the Sex Count in Relationship property for Adult.
	 * 
	 * @param _sexCountinRelationship the new Sex Count in Relationship value
	 */
	public void setSexCountinRelationship(int _sexCountinRelationship) {
		sexCountinRelationship = _sexCountinRelationship;
		sexinRelationshipEvent();
	}

	/**
	 * Gets the Day in Cycle property for Adult.
	 * @return 
	 */
	public int getDayinCycle() {
		return dayinCycle;
	}

	/**
	 * Sets the Day in Cycle property for Adult.
	 * 
	 * @param _dayinCycle the new Day in Cycle value
	 */
	public void setDayinCycle(int _dayinCycle) {
		dayinCycle = _dayinCycle;
	}

	/**
	 * Gets the Sex Count in Lifetime property for Adult.
	 * @return 
	 */
	public int getSexCountinLifetime() {
		return sexCountinLifetime;
	}

	/**
	 * Sets the Sex Count in Lifetime property for Adult.
	 * 
	 * @param _sexCountinLifetime the new Sex Count in Lifetime value
	 */
	public void setSexCountinLifetime(int _sexCountinLifetime) {
		sexCountinLifetime = _sexCountinLifetime;
		sexEvent();
	}

	/**
	 * Gets the Days in Current Relationship property for Adult.
	 * @return 
	 */
	public int getDaysinCurrentRelationship() {
		return daysinCurrentRelationship;
	}

	/**
	 * Sets the Days in Current Relationship property for Adult.
	 * 
	 * @param _daysinCurrentRelationship the new Days in Current Relationship value
	 */
	public void setDaysinCurrentRelationship(int _daysinCurrentRelationship) {
		daysinCurrentRelationship = _daysinCurrentRelationship;
	}

	/**
	 * Gets the Sex Partners in Lifetime property for Adult.
	 * @return 
	 */
	public int getSexPartnersinLifetime() {
		return sexPartnersinLifetime;
	}

	/**
	 * Sets the Sex Partners in Lifetime property for Adult.
	 * 
	 * @param _sexPartnersinLifetime the new Sex Partners in Lifetime value
	 */
	public void setSexPartnersinLifetime(int _sexPartnersinLifetime) {
		sexPartnersinLifetime = _sexPartnersinLifetime;
	}

	/**
	 * Gets the Day of Last Sex property for Adult.
	 * @return The last day in which sex occurred.  Zero if no such event.
	 */
	public int getDayofLastSex() {
		return dayofLastSex;
	}

	/**
	 * Sets the Day of Last Sex property for Adult.
	 * The last day in which sex occurred.  Zero if no such event.
	 * @param _dayofLastSex the new Day of Last Sex value
	 */
	public void setDayofLastSex(int _dayofLastSex) {
		dayofLastSex = _dayofLastSex;
	}

	/**
	 * Gets the Pregnancies in Lifetime property for Adult.
	 * @return 
	 */
	public int getPregnanciesinLifetime() {
		return pregnanciesinLifetime;
	}

	/**
	 * Sets the Pregnancies in Lifetime property for Adult.
	 * 
	 * @param _pregnanciesinLifetime the new Pregnancies in Lifetime value
	 */
	public void setPregnanciesinLifetime(int _pregnanciesinLifetime) {
		pregnanciesinLifetime = _pregnanciesinLifetime;
	}

	/**
	 * Gets the Births in Lifetime property for Adult.
	 * @return The total number of live birth events.
	 */
	public int getBirthsinLifetime() {
		return birthsinLifetime;
	}

	/**
	 * Sets the Births in Lifetime property for Adult.
	 * The total number of live birth events.
	 * @param _birthsinLifetime the new Births in Lifetime value
	 */
	public void setBirthsinLifetime(int _birthsinLifetime) {
		birthsinLifetime = _birthsinLifetime;
		birthEvent();
	}

	/**
	 * Gets the Abortions in Lifetime property for Adult.
	 * @return 
	 */
	public int getAbortionsinLifetime() {
		return abortionsinLifetime;
	}

	/**
	 * Sets the Abortions in Lifetime property for Adult.
	 * 
	 * @param _abortionsinLifetime the new Abortions in Lifetime value
	 */
	public void setAbortionsinLifetime(int _abortionsinLifetime) {
		abortionsinLifetime = _abortionsinLifetime;
	}

	/**
	 * Gets the Miscarriages in Lifetime property for Adult.
	 * @return 
	 */
	public int getMiscarriagesinLifetime() {
		return miscarriagesinLifetime;
	}

	/**
	 * Sets the Miscarriages in Lifetime property for Adult.
	 * 
	 * @param _miscarriagesinLifetime the new Miscarriages in Lifetime value
	 */
	public void setMiscarriagesinLifetime(int _miscarriagesinLifetime) {
		miscarriagesinLifetime = _miscarriagesinLifetime;
	}

	/**
	 * Gets the Ratio Pregnancies to Sex Events property for Adult.
	 * @return 
	 */
	public double getRatioPregnanciestoSexEvents() {
		return ratioPregnanciestoSexEvents;
	}

	/**
	 * Sets the Ratio Pregnancies to Sex Events property for Adult.
	 * 
	 * @param _ratioPregnanciestoSexEvents the new Ratio Pregnancies to Sex Events value
	 */
	public void setRatioPregnanciestoSexEvents(
			double _ratioPregnanciestoSexEvents) {
		ratioPregnanciestoSexEvents = _ratioPregnanciestoSexEvents;
	}

	/**
	 * Gets the Poor Births in Lifetime property for Adult.
	 * @return 
	 */
	public int getPoorBirthsinLifetime() {
		return poorBirthsinLifetime;
	}

	/**
	 * Sets the Poor Births in Lifetime property for Adult.
	 * 
	 * @param _poorBirthsinLifetime the new Poor Births in Lifetime value
	 */
	public void setPoorBirthsinLifetime(int _poorBirthsinLifetime) {
		poorBirthsinLifetime = _poorBirthsinLifetime;
	}

	/**
	 * Gets the Race property for Adult.
	 * @return 
	 */
	public RaceEnum getRace() {
		return race;
	}

	/**
	 * Sets the Race property for Adult.
	 * 
	 * @param _race the new Race value
	 */
	public void setRace(RaceEnum _race) {
		race = _race;
	}

	/**
	 * Gets the SES property for Adult.
	 * @return Socio-Economic Category. Currently defined by mother's education level, i.e. high school, high-school degree, some college, at least a college degree.
	 */
	public SESEnum getSES() {
		return sES;
	}

	/**
	 * Sets the SES property for Adult.
	 * Socio-Economic Category. Currently defined by mother's education level, i.e. high school, high-school degree, some college, at least a college degree.
	 * @param _sES the new SES value
	 */
	public void setSES(SESEnum _sES) {
		sES = _sES;
	}

	/**
	 * Gets the Coital Behavior Type property for Adult.
	 * @return 
	 */
	public CoitalBehaviorTypeEnum getCoitalBehaviorType() {
		return coitalBehaviorType;
	}

	/**
	 * Sets the Coital Behavior Type property for Adult.
	 * 
	 * @param _coitalBehaviorType the new Coital Behavior Type value
	 */
	public void setCoitalBehaviorType(CoitalBehaviorTypeEnum _coitalBehaviorType) {
		coitalBehaviorType = _coitalBehaviorType;
		watchCoitalBehaviorType();
	}

	/**
	 * Gets the Married Code property for Adult.
	 * @return 
	 */
	public int getMarriedCode() {
		return marriedCode;
	}

	/**
	 * Sets the Married Code property for Adult.
	 * 
	 * @param _marriedCode the new Married Code value
	 */
	public void setMarriedCode(int _marriedCode) {
		marriedCode = _marriedCode;
	}

	/**
	 * Gets the Unmarried Code property for Adult.
	 * @return 
	 */
	public int getUnmarriedCode() {
		return unmarriedCode;
	}

	/**
	 * Sets the Unmarried Code property for Adult.
	 * 
	 * @param _unmarriedCode the new Unmarried Code value
	 */
	public void setUnmarriedCode(int _unmarriedCode) {
		unmarriedCode = _unmarriedCode;
	}

	/**
	 * Gets the ID property for Adult.
	 * @return 
	 */
	public int getID() {
		return iD;
	}

	/**
	 * Sets the ID property for Adult.
	 * 
	 * @param _iD the new ID value
	 */
	public void setID(int _iD) {
		iD = _iD;
	}

	/**
	 * Gets the Spouse ID property for Adult.
	 * @return 
	 */
	public int getSpouseID() {
		return spouseID;
	}

	/**
	 * Sets the Spouse ID property for Adult.
	 * 
	 * @param _spouseID the new Spouse ID value
	 */
	public void setSpouseID(int _spouseID) {
		spouseID = _spouseID;
	}

	/**
	 * Gets the Male Code property for Adult.
	 * @return 0 for female, 1 for male.
	 */
	public int getMaleCode() {
		return maleCode;
	}

	/**
	 * Sets the Male Code property for Adult.
	 * 0 for female, 1 for male.
	 * @param _maleCode the new Male Code value
	 */
	public void setMaleCode(int _maleCode) {
		maleCode = _maleCode;
	}

	/**
	 * Gets the Female Code property for Adult.
	 * @return 
	 */
	public int getFemaleCode() {
		return femaleCode;
	}

	/**
	 * Sets the Female Code property for Adult.
	 * 
	 * @param _femaleCode the new Female Code value
	 */
	public void setFemaleCode(int _femaleCode) {
		femaleCode = _femaleCode;
	}

	/**
	 * Gets the Partner Contraception Method property for Adult.
	 * @return 
	 */
	public PartnerContraceptionMethodEnum getPartnerContraceptionMethod() {
		return partnerContraceptionMethod;
	}

	/**
	 * Sets the Partner Contraception Method property for Adult.
	 * 
	 * @param _partnerContraceptionMethod the new Partner Contraception Method value
	 */
	public void setPartnerContraceptionMethod(
			PartnerContraceptionMethodEnum _partnerContraceptionMethod) {
		partnerContraceptionMethod = _partnerContraceptionMethod;
	}

	/**
	 * Gets the Sterilization Choices property for Adult.
	 * @return 
	 */
	public int getSterilizationChoices() {
		return sterilizationChoices;
	}

	/**
	 * Sets the Sterilization Choices property for Adult.
	 * 
	 * @param _sterilizationChoices the new Sterilization Choices value
	 */
	public void setSterilizationChoices(int _sterilizationChoices) {
		sterilizationChoices = _sterilizationChoices;
	}

	/**
	 * Gets the Pregnancy Status property for Adult.
	 * @return 
	 */
	public PregnancyStatusEnum getPregnancyStatus() {
		return pregnancyStatus;
	}

	/**
	 * Sets the Pregnancy Status property for Adult.
	 * 
	 * @param _pregnancyStatus the new Pregnancy Status value
	 */
	public void setPregnancyStatus(PregnancyStatusEnum _pregnancyStatus) {
		pregnancyStatus = _pregnancyStatus;
	}

	/**
	 * Gets the Pregnancy Status Couple property for Adult.
	 * @return 
	 */
	public PregnancyStatusCoupleEnum getPregnancyStatusCouple() {
		return pregnancyStatusCouple;
	}

	/**
	 * Sets the Pregnancy Status Couple property for Adult.
	 * 
	 * @param _pregnancyStatusCouple the new Pregnancy Status Couple value
	 */
	public void setPregnancyStatusCouple(
			PregnancyStatusCoupleEnum _pregnancyStatusCouple) {
		pregnancyStatusCouple = _pregnancyStatusCouple;
	}

	public String getName() {
		if (name == null) {
			return "Adult " + getUID();
		} else {
			return name;
		}
	}
}

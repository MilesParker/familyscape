package edu.brook.ccf.rpm;

/**
 * Adult Java Implementation.
 * 
 * Generated by metaabm system: Feb 16, 2010 7:31:51 PM PST for model: RelationshipsAndPregnancyData.metaabm in project: edu.brook.parent.escape 
 */

public class Adult extends org.ascape.model.CellOccupant {

	/**
	 * 
	 */

	private GenderEnum gender = GenderEnum.female;
	/**
	 * 
	 */

	private int ageinYears = 0;
	/**
	 * 
	 */

	private int ageinYearsIndex = 0;
	/**
	 * 
	 */

	private AgeGroupEnum ageGroup = AgeGroupEnum.years15to19;
	/**
	 * 
	 */

	private EducationEnum education = EducationEnum.hS;
	/**
	 * 
	 */

	private boolean inRelationship = false;
	/**
	 * 
	 */

	private MaritalStatusEnum maritalStatus = MaritalStatusEnum.single;
	/**
	 * 
	 */

	private ContraceptionMethodEnum contraceptionMethod = ContraceptionMethodEnum.none;
	/**
	 * 
	 */

	private boolean rhythmMethodUser = false;
	/**
	 * 
	 */

	private int projectedDayofBirth = 0;
	/**
	 * The day on which last miscarriage occurs or will occur. Zero if no such event.
	 */

	private int projectedDayofMiscarriage = 0;
	/**
	 * The day on which last abortion occurred or will occur. Zero if no such event.
	 */

	private int projectedDayofAbortion = 0;
	/**
	 * My desire to enter into a relationship with a member of the opposite sex, given that I am not currently in a relationship. 
	 */

	private double pRelationshipInitial = 0.0;
	/**
	 * Given that I am currently in a relationship, the likelihood that I wish to remain in that relationship for the current period.
	 */

	private double pEndRelationship = 0.0;
	/**
	 * The probability that this agent will become married on a given day, ignoring pregnancy status.
	 */

	private double pMarriage = 0.0;
	/**
	 * 
	 */

	private double pDivorce = 0.0;
	/**
	 * Given that I am in a relationship with a partner with whom I have not had sex, the likilihood that I wish to engage in sex with that partner during given period.
	 */

	private double pSex = 0.0;
	/**
	 * Given that I continue in a relationship with whom I've had sex, the likilihood that I wish to engage in sex with that same partner during given period.
	 */

	private double pSexInitial = 0.0;
	/**
	 * 
	 */

	private int sexCountinRelationship = 0;
	/**
	 * 
	 */

	private int dayinCycle = 0;
	/**
	 * 
	 */

	private int sexCountinLifetime = 0;
	/**
	 * 
	 */

	private int daysinCurrentRelationship = 0;
	/**
	 * 
	 */

	private int sexPartnersinLifetime = 0;
	/**
	 * The last day in which sex occurred.  Zero if no such event.
	 */

	private int dayofLastSex = -1;
	/**
	 * 
	 */

	private int pregnanciesinLifetime = 0;
	/**
	 * The total number of live birth events.
	 */

	private int birthsinLifetime = 0;
	/**
	 * 
	 */

	private int abortionsinLifetime = 0;
	/**
	 * 
	 */

	private int miscarriagesinLifetime = 0;
	/**
	 * 
	 */

	private double ratioPregnanciestoSexEvents = 0.0;
	/**
	 * 
	 */

	private int poorBirthsinLifetime = 0;
	/**
	 * 
	 */

	private RaceEnum race = RaceEnum.white;
	/**
	 * Socio-Economic Category. Currently defined by mother's education level, i.e. high school, high-school degree, some college, at least a college degree.
	 */

	private SESEnum sES = SESEnum.category4;
	/**
	 * 
	 */

	private CoitalBehaviorTypeEnum coitalBehaviorType = CoitalBehaviorTypeEnum.veryLowFrequency;
	/**
	 * 
	 */

	private int marriedCode = -1;
	/**
	 * 
	 */

	private int unmarriedCode = -1;
	/**
	 * 
	 */

	private int iD = 0;
	/**
	 * 
	 */

	private int spouseID = 0;
	/**
	 * 0 for female, 1 for male.
	 */

	private int maleCode = -1;
	/**
	 * 
	 */

	private int femaleCode = -1;
	/**
	 * 
	 */

	private PartnerContraceptionMethodEnum partnerContraceptionMethod = PartnerContraceptionMethodEnum.otherContraception;
	/**
	 * 
	 */

	private int sterilizationChoices = 0;
	/**
	 * 
	 */

	private PregnancyStatusEnum pregnancyStatus = PregnancyStatusEnum.notPregnant;
	/**
	 * Constructs a new Adult.
	 */

	public Adult() {
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private static long nextUniqueID;

	private long uniqueID;

	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			Adult clone = (Adult) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	public RelationshipsAndPregnancy getRelationshipsAndPregnancy() {
		return (RelationshipsAndPregnancy) getScape().getScape();
	}

	public java.util.List getNetwork() {
		return ((org.ascape.model.space.Graph) getRelationshipsAndPregnancy()
				.getPartners().getSpace()).getNeighborsFor(this);
	}
	/**
	 * .
	 */

	public void initializeLocation() {

		{

			NeighborhoodCell initialLocation = (NeighborhoodCell) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
					.getNeighborhood().getSpace()).findRandomAvailable();
			if (initialLocation != null) {

				if (getHostScape() != initialLocation.getScape()) {
					die();
					initialLocation.getRelationshipsAndPregnancy()
							.getAdultScape().add(this);
				}
				moveTo(initialLocation);

			}
		}

	}
	/**
	 * .
	 */

	public void initializeBehaviorValues() {

		setPregnancyStatus(PregnancyStatusEnum.notPregnant);
		double pRelationshipEnd = randomInRange(getRelationshipsAndPregnancy()
				.getPRelationshipEndMinimum(), getRelationshipsAndPregnancy()
				.getPRelationshipEndMaximum());
		double pRelationshipBegin = randomInRange(
				getRelationshipsAndPregnancy().getPRelationshipBeginMinimum(),
				getRelationshipsAndPregnancy().getPRelationshipBeginMaximum());
		setPEndRelationship(pRelationshipEnd);
		setPRelationshipInitial(pRelationshipBegin);
	}
	/**
	 * .
	 */

	public void initializeAges() {

		{
			int initializeAgesAgeinYearsSubtractMinimumAge = getAgeinYears()
					- getRelationshipsAndPregnancy().getMinimumAge();
			int initializeAgesRandomToLimit_LunarDays_ = randomToLimit(getRelationshipsAndPregnancy()
					.getLunarDays());
			if (getAgeinYears() >= 20) {

				setAgeGroup(AgeGroupEnum.years20to24);
				{
					if (getAgeinYears() >= 25) {

						setAgeGroup(AgeGroupEnum.years25to29);
						{
							if (getAgeinYears() >= 30) {

								setAgeGroup(AgeGroupEnum.years30to44);
							}

						}
					}

				}
			}

			{
				if (!(getAgeinYears() >= 20)) {

					setAgeGroup(AgeGroupEnum.years15to19);
				}

			}
			setAgeinYearsIndex(initializeAgesAgeinYearsSubtractMinimumAge);
			setDayinCycle(initializeAgesRandomToLimit_LunarDays_);
		}

	}
	/**
	 * .
	 */

	public void initializeMaritalState() {

		if (getMaritalStatus() == MaritalStatusEnum.married) {

			{
				org.ascape.util.Conditional assignedSpouseCondition = new org.ascape.util.Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;

					public boolean meetsCondition(Object assignedSpouseCell) {
						if (assignedSpouseCell instanceof Adult) {
							Adult assignedSpouse = (Adult) assignedSpouseCell;
							return (assignedSpouse.getID() == getSpouseID());
						} else {
							return false;
						}
					}
				};

				Adult assignedSpouse = (Adult) getScape().findRandom(
						assignedSpouseCondition);
				if (assignedSpouse != null) {
					if (assignedSpouse.getID() == getSpouseID()) {

						((org.ascape.model.space.Graph) getRelationshipsAndPregnancy()
								.getPartners().getSpace()).addNeighborSafe(
								this, assignedSpouse, false);
						if (getGender() == GenderEnum.female) {

							{

								NeighborhoodCell assignedSpouseNeighborCell = (NeighborhoodCell) ((org.ascape.model.space.Discrete) assignedSpouse
										.getRelationshipsAndPregnancy()
										.getNeighborhood().getSpace())
										.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) assignedSpouse)
												.getHostCell());
								if (assignedSpouseNeighborCell != null) {

									if (getHostScape() != assignedSpouseNeighborCell
											.getScape()) {
										die();
										assignedSpouseNeighborCell
												.getRelationshipsAndPregnancy()
												.getAdultScape().add(this);
									}
									moveTo(assignedSpouseNeighborCell);

									setInRelationship(true);

								}
							}

						}

					}

				}
			}
		}

	}
	/**
	 * .
	 */

	public void movement() {

		if (!isInRelationship()) {

			{

				NeighborhoodCell nextCell = (NeighborhoodCell) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
						.getNeighborhood().getSpace())
						.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
								.getHostCell());
				if (nextCell != null) {

					if (getHostScape() != nextCell.getScape()) {
						die();
						nextCell.getRelationshipsAndPregnancy().getAdultScape()
								.add(this);
					}
					moveTo(nextCell);

				}
			}

			if (getRelationshipsAndPregnancy().getWalkTowardAge() == 1
					&& !isInRelationship()) {

				{
					org.ascape.util.Conditional adultNearAgeCondition = new org.ascape.util.Conditional() {
						private static final long serialVersionUID = 6846144446402098985L;

						public boolean meetsCondition(Object adultNearAgeCell) {
							adultNearAgeCell = ((org.ascape.model.HostCell) adultNearAgeCell)
									.getOccupant();
							if (adultNearAgeCell instanceof Adult) {
								Adult adultNearAge = (Adult) adultNearAgeCell;
								return (getEducation() == adultNearAge
										.getEducation() && getAgeGroup() == adultNearAge
										.getAgeGroup());
							} else {
								return false;
							}
						}
					};

					Adult adultNearAge = null;
					org.ascape.model.space.Location adultNearAgeLocation = ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
							.getNeighborhood().getSpace())
							.findNearestAvailable(
									((org.ascape.model.CellOccupant) this)
											.getHostCell(),
									adultNearAgeCondition, false,
									getRelationshipsAndPregnancy()
											.getAgentVision());
					if (adultNearAgeLocation != null) {
						adultNearAge = (Adult) ((org.ascape.model.HostCell) adultNearAgeLocation)
								.getOccupant();
					}
					if (adultNearAge != null) {

						if (getHostScape() != adultNearAge.getScape()) {
							die();
							adultNearAge.getRelationshipsAndPregnancy()
									.getAdultScape().add(this);
						}
						moveToward(((org.ascape.model.CellOccupant) adultNearAge)
								.getHostCell());

					}
				}

			}

		}

	}
	/**
	 * .
	 */

	public void updateDates() {

		{
			int cyclefromAgeinDays = getDayinCycle() + 1;
			{
				if (cyclefromAgeinDays < getRelationshipsAndPregnancy()
						.getLunarDays()) {

					setDayinCycle(cyclefromAgeinDays);
				}

				{
					if (!(cyclefromAgeinDays < getRelationshipsAndPregnancy()
							.getLunarDays())) {

						setDayinCycle(0);
					}

				}
			}
			if (isInRelationship()) {

				int incrementTime = getDaysinCurrentRelationship() + 1;
				setDaysinCurrentRelationship(incrementTime);
			}

		}

	}
	/**
	 * .
	 */

	public void updateRelationship() {

		{
			{
				{
					{
						{
							{
								{
									int updateRelationshipNow = getScape()
											.getPeriod();

									{
										if ((getMaritalStatus() == MaritalStatusEnum.married && getDaysinCurrentRelationship() == 0)) {

											setUnmarriedCode(0);
											setMarriedCode(1);
											{

												{
													{
														if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized
																&& getGender() == GenderEnum.male) {

															int updateRelationshipIncrementSterilizationChoices = getSterilizationChoices() + 1;
															double pSterilizeMaleMarried = pSterilizeMaleMarried();

															setSterilizationChoices(updateRelationshipIncrementSterilizationChoices);
															double maleMarriedSterilizeDraw = getRandom()
																	.nextDouble();
															{
																{
																	if (maleMarriedSterilizeDraw < pSterilizeMaleMarried) {

																		setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																		{
																			org.ascape.util.Conditional femalePartnerSterilizationCondition = new org.ascape.util.Conditional() {
																				private static final long serialVersionUID = 6846144446402098985L;

																				public boolean meetsCondition(
																						Object femalePartnerSterilizationCell) {
																					if (femalePartnerSterilizationCell instanceof Adult) {
																						return true;
																					} else {
																						return false;
																					}
																				}
																			};

																			Adult femalePartnerSterilization = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
																					.getPartners()
																					.getSpace())
																					.findRandomNeighbor(
																							this,
																							femalePartnerSterilizationCondition);
																			if (femalePartnerSterilization != null) {

																				{
																					{
																						if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {

																							femalePartnerSterilization
																									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																							femalePartnerSterilization
																									.setUnmarriedCode(0);
																							femalePartnerSterilization
																									.setMarriedCode(1);
																							double femaleSterilizeDraw = getRandom()
																									.nextDouble();
																							double pSterilizeFemaleMarried = femalePartnerSterilization
																									.pSterilizeFemaleMarried();

																							{
																								{
																									if (femaleSterilizeDraw < pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																									if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.none);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																								}
																							}
																						}

																						if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

																							femalePartnerSterilization
																									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																							femalePartnerSterilization
																									.setUnmarriedCode(0);
																							femalePartnerSterilization
																									.setMarriedCode(1);
																							double femaleSterilizeDraw = getRandom()
																									.nextDouble();
																							double pSterilizeFemaleMarried = femalePartnerSterilization
																									.pSterilizeFemaleMarried();

																							{
																								{
																									if (femaleSterilizeDraw < pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																									if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.none);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																								}
																							}
																						}

																					}
																				}

																			}
																		}
																	}

																	if (maleMarriedSterilizeDraw >= pSterilizeMaleMarried) {

																		{
																			org.ascape.util.Conditional femalePartnerSterilizationCondition = new org.ascape.util.Conditional() {
																				private static final long serialVersionUID = 6846144446402098985L;

																				public boolean meetsCondition(
																						Object femalePartnerSterilizationCell) {
																					if (femalePartnerSterilizationCell instanceof Adult) {
																						return true;
																					} else {
																						return false;
																					}
																				}
																			};

																			Adult femalePartnerSterilization = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
																					.getPartners()
																					.getSpace())
																					.findRandomNeighbor(
																							this,
																							femalePartnerSterilizationCondition);
																			if (femalePartnerSterilization != null) {

																				{
																					{
																						if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {

																							femalePartnerSterilization
																									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																							femalePartnerSterilization
																									.setUnmarriedCode(0);
																							femalePartnerSterilization
																									.setMarriedCode(1);
																							double femaleSterilizeDraw = getRandom()
																									.nextDouble();
																							double pSterilizeFemaleMarried = femalePartnerSterilization
																									.pSterilizeFemaleMarried();

																							{
																								{
																									if (femaleSterilizeDraw < pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																									if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.none);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																								}
																							}
																						}

																						if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

																							femalePartnerSterilization
																									.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																							femalePartnerSterilization
																									.setUnmarriedCode(0);
																							femalePartnerSterilization
																									.setMarriedCode(1);
																							double femaleSterilizeDraw = getRandom()
																									.nextDouble();
																							double pSterilizeFemaleMarried = femalePartnerSterilization
																									.pSterilizeFemaleMarried();

																							{
																								{
																									if (femaleSterilizeDraw < pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																									if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {

																										femalePartnerSterilization
																												.setContraceptionMethod(ContraceptionMethodEnum.none);
																										setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																										setInRelationship(true);
																										femalePartnerSterilization
																												.setInRelationship(true);
																									}

																								}
																							}
																						}

																					}
																				}

																			}
																		}
																	}

																}
															}
														}

														if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized
																&& getGender() == GenderEnum.male) {

															{
																org.ascape.util.Conditional femalePartnerSterilizationCondition = new org.ascape.util.Conditional() {
																	private static final long serialVersionUID = 6846144446402098985L;

																	public boolean meetsCondition(
																			Object femalePartnerSterilizationCell) {
																		if (femalePartnerSterilizationCell instanceof Adult) {
																			return true;
																		} else {
																			return false;
																		}
																	}
																};

																Adult femalePartnerSterilization = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
																		.getPartners()
																		.getSpace())
																		.findRandomNeighbor(
																				this,
																				femalePartnerSterilizationCondition);
																if (femalePartnerSterilization != null) {

																	{
																		{
																			if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {

																				femalePartnerSterilization
																						.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																				femalePartnerSterilization
																						.setUnmarriedCode(0);
																				femalePartnerSterilization
																						.setMarriedCode(1);
																				double femaleSterilizeDraw = getRandom()
																						.nextDouble();
																				double pSterilizeFemaleMarried = femalePartnerSterilization
																						.pSterilizeFemaleMarried();

																				{
																					{
																						if (femaleSterilizeDraw < pSterilizeFemaleMarried) {

																							femalePartnerSterilization
																									.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																							setInRelationship(true);
																							femalePartnerSterilization
																									.setInRelationship(true);
																						}

																						if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {

																							femalePartnerSterilization
																									.setContraceptionMethod(ContraceptionMethodEnum.none);
																							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																							setInRelationship(true);
																							femalePartnerSterilization
																									.setInRelationship(true);
																						}

																					}
																				}
																			}

																			if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

																				femalePartnerSterilization
																						.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																				femalePartnerSterilization
																						.setUnmarriedCode(0);
																				femalePartnerSterilization
																						.setMarriedCode(1);
																				double femaleSterilizeDraw = getRandom()
																						.nextDouble();
																				double pSterilizeFemaleMarried = femalePartnerSterilization
																						.pSterilizeFemaleMarried();

																				{
																					{
																						if (femaleSterilizeDraw < pSterilizeFemaleMarried) {

																							femalePartnerSterilization
																									.setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
																							setInRelationship(true);
																							femalePartnerSterilization
																									.setInRelationship(true);
																						}

																						if (femaleSterilizeDraw >= pSterilizeFemaleMarried) {

																							femalePartnerSterilization
																									.setContraceptionMethod(ContraceptionMethodEnum.none);
																							setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
																							setInRelationship(true);
																							femalePartnerSterilization
																									.setInRelationship(true);
																						}

																					}
																				}
																			}

																		}
																	}

																}
															}
														}

													}
												}

											}
										}

									}

									{
										{
											if ((isInRelationship()
													&& getDaysinCurrentRelationship() == 0 && getMaritalStatus() == MaritalStatusEnum.single)) {

												setUnmarriedCode(1);
												setMarriedCode(0);
												setInRelationship(true);
											}

											if ((getDaysinCurrentRelationship() > 0 && getMaritalStatus() == MaritalStatusEnum.single)) {

												double continueDraw = getRandom()
														.nextDouble();
												{
													if (continueDraw < getPEndRelationship()) {

														{
															org.ascape.util.Conditional relationshipPartnerCondition = new org.ascape.util.Conditional() {
																private static final long serialVersionUID = 6846144446402098985L;

																public boolean meetsCondition(
																		Object relationshipPartnerCell) {
																	if (relationshipPartnerCell instanceof Adult) {
																		return true;
																	} else {
																		return false;
																	}
																}
															};

															Adult relationshipPartner = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
																	.getPartners()
																	.getSpace())
																	.findRandomNeighbor(
																			this,
																			relationshipPartnerCondition);
															if (relationshipPartner != null) {

																((org.ascape.model.space.Graph) getRelationshipsAndPregnancy()
																		.getPartners()
																		.getSpace())
																		.clearNeighbors(this);
																relationshipPartner
																		.setInRelationship(false);
																setInRelationship(false);

															}
														}
													}

												}
											}

										}
									}

									{
										if ((getMaritalStatus() == MaritalStatusEnum.single && getUnmarriedCode() == -1)) {

											setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
											double unmarriedSterilizeDraw = getRandom()
													.nextDouble();
											{
												{
													if (getGender() == GenderEnum.male) {

														double pSterilizeMaleUnmarried = pSterilizeMaleUnmarried();

														{
															{
																if (unmarriedSterilizeDraw < pSterilizeMaleUnmarried) {

																	setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																	setInRelationship(false);
																}

																if (unmarriedSterilizeDraw >= pSterilizeMaleUnmarried) {

																	setInRelationship(false);
																}

															}
														}
													}

													if (getGender() == GenderEnum.female) {

														double pSterilizeFemaleUnmarried = pSterilizeFemaleUnmarried();

														{
															{
																if (unmarriedSterilizeDraw < pSterilizeFemaleUnmarried) {

																	setContraceptionMethod(ContraceptionMethodEnum.sterilized);
																	setInRelationship(false);
																}

																if (unmarriedSterilizeDraw >= pSterilizeFemaleUnmarried) {

																	setInRelationship(false);
																}

															}
														}
													}

												}
											}
										}

									}

									{

										{
											{

												{
													if (getGender() == GenderEnum.female
															&& (getMaritalStatus() != MaritalStatusEnum.married && updateRelationshipNow >= getRelationshipsAndPregnancy()
																	.getMarriageAndDivorceStartDay())) {

														double marriageDrawSubsequent = getRandom()
																.nextDouble();
														{
															if (marriageDrawSubsequent < getPMarriage()) {

																{
																	org.ascape.util.Conditional marriagePartnerCondition = new org.ascape.util.Conditional() {
																		private static final long serialVersionUID = 6846144446402098985L;

																		public boolean meetsCondition(
																				Object marriagePartnerCell) {
																			if (marriagePartnerCell instanceof Adult) {
																				return true;
																			} else {
																				return false;
																			}
																		}
																	};

																	Adult marriagePartner = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
																			.getPartners()
																			.getSpace())
																			.findRandomNeighbor(
																					this,
																					marriagePartnerCondition);
																	if (marriagePartner != null) {

																		{
																			if (marriageDrawSubsequent < marriagePartner
																					.getPMarriage()) {

																				setMaritalStatus(MaritalStatusEnum.married);
																				marriagePartner
																						.setMaritalStatus(MaritalStatusEnum.married);
																			}

																		}

																	}
																}
															}

														}
													}

												}

												if ((getMaritalStatus() == MaritalStatusEnum.married && updateRelationshipNow >= getRelationshipsAndPregnancy()
														.getMarriageAndDivorceStartDay())) {

													double divorceDrawSubsequent = getRandom()
															.nextDouble();
													{
														if (divorceDrawSubsequent < getPDivorce()) {

															{
																org.ascape.util.Conditional divorcingPartnerCondition = new org.ascape.util.Conditional() {
																	private static final long serialVersionUID = 6846144446402098985L;

																	public boolean meetsCondition(
																			Object divorcingPartnerCell) {
																		if (divorcingPartnerCell instanceof Adult) {
																			return true;
																		} else {
																			return false;
																		}
																	}
																};

																Adult divorcingPartner = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
																		.getPartners()
																		.getSpace())
																		.findRandomNeighbor(
																				this,
																				divorcingPartnerCondition);
																if (divorcingPartner != null) {

																	((org.ascape.model.space.Graph) getRelationshipsAndPregnancy()
																			.getPartners()
																			.getSpace())
																			.clearNeighbors(this);
																	divorcingPartner
																			.setMaritalStatus(MaritalStatusEnum.divorced);
																	setMaritalStatus(MaritalStatusEnum.divorced);
																	setInRelationship(false);
																	divorcingPartner
																			.setInRelationship(false);

																}
															}
														}

													}
												}

											}
										}

									}
								}
							}
						}
					}
				}
			}
		}

	}
	/**
	 * .
	 */

	public void seekPartner() {

		{
			if (!isInRelationship()) {

				double enterRelationshipDraw = getRandom().nextDouble();
				{
					if (enterRelationshipDraw < getPRelationshipInitial()) {

						{
							org.ascape.util.Conditional newPartnerCondition = new org.ascape.util.Conditional() {
								private static final long serialVersionUID = 6846144446402098985L;

								public boolean meetsCondition(
										Object newPartnerCell) {
									if (newPartnerCell instanceof Adult) {
										Adult newPartner = (Adult) newPartnerCell;
										return (getGender() != newPartner
												.getGender()
												&& getEducation() == newPartner
														.getEducation()
												&& getAgeGroup() == newPartner
														.getAgeGroup() && !newPartner
												.isInRelationship());
									} else {
										return false;
									}
								}
							};

							Adult newPartner = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
									.getNeighborhood().getSpace())
									.findRandomNeighbor(this,
											newPartnerCondition);
							if (newPartner != null) {

								if (enterRelationshipDraw < newPartner
										.getPRelationshipInitial()
										&& (getEducation() == newPartner
												.getEducation()
												&& getGender() != newPartner
														.getGender()
												&& getAgeGroup() == newPartner
														.getAgeGroup() && !newPartner
												.isInRelationship())) {

									((org.ascape.model.space.Graph) getRelationshipsAndPregnancy()
											.getPartners().getSpace())
											.addNeighborSafe(this, newPartner,
													false);
									{
										{
											{
												{
													if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {

														newPartner
																.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
														newPartner
																.setInRelationship(true);
														setInRelationship(true);
													}

													if (getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

														newPartner
																.setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
														newPartner
																.setInRelationship(true);
														setInRelationship(true);
													}

													if (newPartner
															.getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {

														setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.partnerSterilized);
														newPartner
																.setInRelationship(true);
														setInRelationship(true);
													}

													if (newPartner
															.getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

														setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
														newPartner
																.setInRelationship(true);
														setInRelationship(true);
													}

												}
											}
										}
									}
								}

							}
						}

					}

				}
			}

		}

	}
	/**
	 * .
	 */

	public void pregnancyOutcome() {

		{
			if (getPregnancyStatus() == PregnancyStatusEnum.pregnant) {

				int currentDay = getScape().getPeriod();
				{
					{
						{
							if (currentDay == getProjectedDayofAbortion()) {

								setPregnancyStatus(PregnancyStatusEnum.notPregnant);
								int incrementAbortionsinLifetime = getAbortionsinLifetime() + 1;
								setAbortionsinLifetime(incrementAbortionsinLifetime);
							}

							if (currentDay == getProjectedDayofMiscarriage()) {

								setPregnancyStatus(PregnancyStatusEnum.notPregnant);
								int incrementMiscarriagesinLifetime = getMiscarriagesinLifetime() + 1;
								setMiscarriagesinLifetime(incrementMiscarriagesinLifetime);
							}

							if (currentDay == getProjectedDayofBirth()) {

								setPregnancyStatus(PregnancyStatusEnum.notPregnant);
								int incrementBirthsinLifetime = getBirthsinLifetime() + 1;
								setBirthsinLifetime(incrementBirthsinLifetime);
							}

						}
					}
				}
			}

		}

	}
	/**
	 * .
	 */

	public void sexPotential() {

		{
			if (getGender() == GenderEnum.male) {

				{
					org.ascape.util.Conditional femalePartnerCondition = new org.ascape.util.Conditional() {
						private static final long serialVersionUID = 6846144446402098985L;

						public boolean meetsCondition(Object femalePartnerCell) {
							if (femalePartnerCell instanceof Adult) {
								return true;
							} else {
								return false;
							}
						}
					};

					Adult femalePartner = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
							.getPartners().getSpace()).findRandomNeighbor(this,
							femalePartnerCondition);
					if (femalePartner != null) {

						double sexDraw = getRandom().nextDouble();
						{
							if (getSexCountinRelationship() > 0) {

								double jointSubsequentSexProclivity = java.lang.Math
										.min(getPSex(), femalePartner.getPSex())

								;
								{
									{
										if (femalePartner.isRhythmMethodUser()) {

											double intercourseBiasforCycleSubsequent = getRelationshipsAndPregnancy()
													.getRhythmMethodBiasforDay()[getDayinCycle()]

											;
											double sexProclivityGivenDayinCycleSubsequent = jointSubsequentSexProclivity
													* intercourseBiasforCycleSubsequent;
											{
												if (sexDraw < sexProclivityGivenDayinCycleSubsequent) {

													int incrementSelfSexCount = getSexCountinLifetime() + 1;
													int incrementPartnerSexCount = femalePartner
															.getSexCountinLifetime() + 1;
													setSexCountinLifetime(incrementSelfSexCount);
													femalePartner
															.setSexCountinLifetime(incrementPartnerSexCount);
												}

											}
										}

										{
											if (sexDraw < jointSubsequentSexProclivity
													&& !femalePartner
															.isRhythmMethodUser()) {

												int incrementSelfSexCount = getSexCountinLifetime() + 1;
												int incrementPartnerSexCount = femalePartner
														.getSexCountinLifetime() + 1;
												setSexCountinLifetime(incrementSelfSexCount);
												femalePartner
														.setSexCountinLifetime(incrementPartnerSexCount);
											}

										}

									}
								}
							}

							{
								if (!(getSexCountinRelationship() > 0)) {

									double jointInitialSexProclivity = java.lang.Math
											.min(getPSexInitial(),
													femalePartner
															.getPSexInitial())

									;
									{
										{
											if (femalePartner
													.isRhythmMethodUser()) {

												double intercourseBiasforCycleInitial = getRelationshipsAndPregnancy()
														.getRhythmMethodBiasforDay()[getDayinCycle()]

												;
												double sexProclivityGivenDayinCycle = jointInitialSexProclivity
														* intercourseBiasforCycleInitial;
												{
													if (sexDraw < sexProclivityGivenDayinCycle) {

														int incrementSelfSexCount = getSexCountinLifetime() + 1;
														int incrementPartnerSexCount = femalePartner
																.getSexCountinLifetime() + 1;
														setSexCountinLifetime(incrementSelfSexCount);
														femalePartner
																.setSexCountinLifetime(incrementPartnerSexCount);
													}

												}
											}

											{
												if (sexDraw < jointInitialSexProclivity
														&& !femalePartner
																.isRhythmMethodUser()) {

													int incrementSelfSexCount = getSexCountinLifetime() + 1;
													int incrementPartnerSexCount = femalePartner
															.getSexCountinLifetime() + 1;
													setSexCountinLifetime(incrementSelfSexCount);
													femalePartner
															.setSexCountinLifetime(incrementPartnerSexCount);
												}

											}

										}
									}
								}

							}
						}

					}
				}
			}

		}

	}
	/**
	 * Watch for changes in Pregnancy Status..
	 */

	public void pregnancyEvent() {

		{
			double pDivorce = pDivorce();

			double pMarriage = pMarriage();

			if (getPregnancyStatus() == PregnancyStatusEnum.pregnant) {

				int dayofPregnancy = getScape().getPeriod();
				int incrementPregnancies = getPregnanciesinLifetime() + 1;
				double outcomeDraw = getRandom().nextDouble();
				double pAbortionMarried = pAbortionMarried();

				double pregnancyEventPAbortionMarriedMultiplyMarriedCode = pAbortionMarried
						* getMarriedCode();
				double pAbortionUnmarried = pAbortionUnmarried();

				double pregnancyEventPAbortionUnmarriedMultiplyUnmarriedCode = pAbortionUnmarried
						* getUnmarriedCode();
				double jointPAbortion = pregnancyEventPAbortionMarriedMultiplyMarriedCode
						+ pregnancyEventPAbortionUnmarriedMultiplyUnmarriedCode;
				{
					if (outcomeDraw < jointPAbortion) {

						int randomDayinTypicalAbortionPeriod = randomInRange(
								getRelationshipsAndPregnancy()
										.getTypicalAbortionPeriodStart(),
								getRelationshipsAndPregnancy()
										.getTypicalAbortionPeriodEnd());
						int projectedAbortionDay = dayofPregnancy
								+ randomDayinTypicalAbortionPeriod;
						setProjectedDayofAbortion(projectedAbortionDay);
					}

					{
						if (!(outcomeDraw < jointPAbortion)) {

							double pMiscarriageMarried = pMiscarriageMarried();

							double pregnancyEventPMiscarriageMarriedMultiplyMarriedCode = pMiscarriageMarried
									* getMarriedCode();
							double pMiscarriageUnmarried = pMiscarriageUnmarried();

							double pregnancyEventPMiscarriageUnmarriedMultiplyUnmarriedCode = pMiscarriageUnmarried
									* getUnmarriedCode();
							double jointPMiscarriage = pregnancyEventPMiscarriageMarriedMultiplyMarriedCode
									+ pregnancyEventPMiscarriageUnmarriedMultiplyUnmarriedCode;
							double jointPMiscarriageorAbortion = jointPAbortion
									+ jointPMiscarriage;
							{
								if (outcomeDraw < jointPMiscarriageorAbortion) {

									int randomDayinMisscarriagePeriod = randomInRange(
											1, getRelationshipsAndPregnancy()
													.getTypicalBirthPeriodEnd());
									int projectedMiscarriageOccuranceDay = dayofPregnancy
											+ randomDayinMisscarriagePeriod;
									setProjectedDayofMiscarriage(projectedMiscarriageOccuranceDay);
								}

								{
									if (!(outcomeDraw < jointPMiscarriageorAbortion)) {

										int randomDayinBirthPeriod = randomInRange(
												getRelationshipsAndPregnancy()
														.getTypicalBirthPeriodStart(),
												getRelationshipsAndPregnancy()
														.getTypicalBirthPeriodEnd());
										int projectedPregnancyDay = dayofPregnancy
												+ randomDayinBirthPeriod;
										setProjectedDayofBirth(projectedPregnancyDay);
									}

								}
							}
						}

					}
				}
				setPregnanciesinLifetime(incrementPregnancies);
				int pregnanciesoverSexinLifetimeCopy = getPregnanciesinLifetime()
						/ incrementPregnancies;
				setRatioPregnanciestoSexEvents(pregnanciesoverSexinLifetimeCopy);
			}

			double adjustedDailyPDivorce = pDivorce
					* getRelationshipsAndPregnancy()
							.getPDivorceYearlytoDailyConversion();
			setPDivorce(adjustedDailyPDivorce);
			double adjustedDailyPMarriage = pMarriage
					* getRelationshipsAndPregnancy()
							.getPMarriageYearlytoDailyConversion();
			setPMarriage(adjustedDailyPMarriage);
		}

	}
	/**
	 * Watch for changes in Sex Count in Lifetime..
	 */

	public void sexEvent() {

		{
			{
				{
					int incrementSexCount = getSexCountinRelationship() + 1;
					int dayofSex = getScape().getPeriod();

					setSexCountinRelationship(incrementSexCount);
					int pregnanciesoverSexinLifetime = getPregnanciesinLifetime()
							/ incrementSexCount;
					setRatioPregnanciestoSexEvents(pregnanciesoverSexinLifetime);
					setDayofLastSex(dayofSex);

					{
						if ((getContraceptionMethod() != ContraceptionMethodEnum.sterilized
								&& getGender() == GenderEnum.female && getPregnancyStatus() == PregnancyStatusEnum.notPregnant)) {

							{
								org.ascape.util.Conditional malePartnerCondition = new org.ascape.util.Conditional() {
									private static final long serialVersionUID = 6846144446402098985L;

									public boolean meetsCondition(
											Object malePartnerCell) {
										if (malePartnerCell instanceof Adult) {
											return true;
										} else {
											return false;
										}
									}
								};

								Adult malePartner = (Adult) ((org.ascape.model.space.Discrete) getRelationshipsAndPregnancy()
										.getPartners().getSpace())
										.findRandomNeighbor(this,
												malePartnerCondition);
								if (malePartner != null) {

									{
										if (malePartner
												.getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

											double pregnancyDraw = getRandom()
													.nextDouble();
											double fecundityinCycle = getRelationshipsAndPregnancy()
													.getFecunditybyDayinCycle()[getDayinCycle()]

											;
											double fecundityForAge = getRelationshipsAndPregnancy()
													.getFecundityByAge()[getAgeinYearsIndex()]

											;
											double pPregnancyAgeandCycle = fecundityinCycle
													* fecundityForAge;
											{

												{
													{
														if ((getContraceptionMethod() == ContraceptionMethodEnum.pill && malePartner
																.getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender)) {

															double pPillFailure = pPillFailure();

															double pPregnancyPillOnly = pPregnancyAgeandCycle
																	* pPillFailure;
															{
																if (pregnancyDraw < pPregnancyPillOnly) {

																	setPregnancyStatus(PregnancyStatusEnum.pregnant);
																}

															}
														}

														if ((getContraceptionMethod() == ContraceptionMethodEnum.pill && malePartner
																.getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender)) {

															double pPillCondomFailure = pPillCondomFailure();

															double pPregnancyPillandCondom = pPregnancyAgeandCycle
																	* pPillCondomFailure;
															{
																if (pregnancyDraw < pPregnancyPillandCondom) {

																	setPregnancyStatus(PregnancyStatusEnum.pregnant);
																}

															}
														}

													}
												}

												{

													{
														if (pregnancyDraw < pPregnancyAgeandCycle
																&& !((malePartner
																		.getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender
																		|| malePartner
																				.getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender || getContraceptionMethod() == ContraceptionMethodEnum.pill))) {

															setPregnancyStatus(PregnancyStatusEnum.pregnant);
														}

													}

												}

											}
										}

									}

								}
							}
						}

					}

				}
			}
		}

	}
	/**
	 * Watch for changes in Sex Count in Relationship..
	 */

	public void sexinRelationshipEvent() {

		{
			if (getSexCountinRelationship() == 1) {

				int newSexPartnerCount = getSexPartnersinLifetime() + 1;
				setSexPartnersinLifetime(newSexPartnerCount);
			}

		}

	}

	/**
	 * Watch for changes in In Relationship..
	 */

	public void watchInRelationship() {

		{
			{
				{
					if (!isInRelationship()) {

						setDaysinCurrentRelationship(0);
						setSexCountinRelationship(0);
						setPartnerContraceptionMethod(PartnerContraceptionMethodEnum.otherContraception);
					}

					if (getMaritalStatus() == MaritalStatusEnum.married) {

						double coitalBehaviorDraw = getRandom().nextDouble();
						double pCoitalFrequencyVeryLowMarried = pCoitalFrequencyVeryLowMarried();

						double watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried = getMarriedCode()
								* pCoitalFrequencyVeryLowMarried;
						double pCoitalFrequencyVeryLowUnmarried = pCoitalFrequencyVeryLowUnmarried();

						double watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried = getUnmarriedCode()
								* pCoitalFrequencyVeryLowUnmarried;
						double jointPVeryLow = watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried
								+ watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried;
						double pCoitalFrequencyModerateMarried = pCoitalFrequencyModerateMarried();

						double pModerateMarriedCode = pCoitalFrequencyModerateMarried
								* getMarriedCode();
						double pCoitalFrequencyModerateUnmarried = pCoitalFrequencyModerateUnmarried();

						double pModerateUnmarriedCode = pCoitalFrequencyModerateUnmarried
								* getUnmarriedCode();
						double jointPModerate = pModerateMarriedCode
								+ pModerateUnmarriedCode;
						double pVeryLoworModerate = jointPModerate
								+ jointPVeryLow;
						{
							if (coitalBehaviorDraw >= pVeryLoworModerate) {

								setCoitalBehaviorType(CoitalBehaviorTypeEnum.highFrequency);
							}

							{

								{
									{
										if (coitalBehaviorDraw < jointPVeryLow
												&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {

											setCoitalBehaviorType(CoitalBehaviorTypeEnum.veryLowFrequency);
										}

										if (coitalBehaviorDraw >= jointPVeryLow
												&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {

											setCoitalBehaviorType(CoitalBehaviorTypeEnum.moderateFrequency);
										}

									}
								}

							}
						}
					}

					if (getUnmarriedCode() == -1) {

						setUnmarriedCode(1);
						setMarriedCode(0);
						double coitalBehaviorDraw = getRandom().nextDouble();
						double pCoitalFrequencyVeryLowMarried = pCoitalFrequencyVeryLowMarried();

						double watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried = getMarriedCode()
								* pCoitalFrequencyVeryLowMarried;
						double pCoitalFrequencyVeryLowUnmarried = pCoitalFrequencyVeryLowUnmarried();

						double watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried = getUnmarriedCode()
								* pCoitalFrequencyVeryLowUnmarried;
						double jointPVeryLow = watchInRelationshipMarriedCodeMultiplyPCoitalFrequencyVeryLowMarried
								+ watchInRelationshipUnmarriedCodeMultiplyPCoitalFrequencyVeryLowUnmarried;
						double pCoitalFrequencyModerateMarried = pCoitalFrequencyModerateMarried();

						double pModerateMarriedCode = pCoitalFrequencyModerateMarried
								* getMarriedCode();
						double pCoitalFrequencyModerateUnmarried = pCoitalFrequencyModerateUnmarried();

						double pModerateUnmarriedCode = pCoitalFrequencyModerateUnmarried
								* getUnmarriedCode();
						double jointPModerate = pModerateMarriedCode
								+ pModerateUnmarriedCode;
						double pVeryLoworModerate = jointPModerate
								+ jointPVeryLow;
						{
							if (coitalBehaviorDraw >= pVeryLoworModerate) {

								setCoitalBehaviorType(CoitalBehaviorTypeEnum.highFrequency);
							}

							{

								{
									{
										if (coitalBehaviorDraw < jointPVeryLow
												&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {

											setCoitalBehaviorType(CoitalBehaviorTypeEnum.veryLowFrequency);
										}

										if (coitalBehaviorDraw >= jointPVeryLow
												&& !(coitalBehaviorDraw >= pVeryLoworModerate)) {

											setCoitalBehaviorType(CoitalBehaviorTypeEnum.moderateFrequency);
										}

									}
								}

							}
						}
					}

				}
			}
		}

	}

	/**
	 * metaabm::act::AEvaluate P Abortion Married.
	 */

	public double pAbortionMarried() {

		double pAbortionMarriedFactor = 0.0;

		pAbortionMarriedFactor = getRelationshipsAndPregnancy()
				.getPAbortionMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarried15to19Factor();
				break;
			case years20to24 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarried20to24Factor();
				break;
			case years25to29 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarried25to29Factor();
				break;
			case years30to44 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedNHSFactor();
				break;
			case pHS :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedPHSFactor();
				break;
			case hS :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedOtherFactor();
				break;
			case black :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedBlackFactor();
				break;
			case hispanic :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedHispanicFactor();
				break;
			case white :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedCategory1Factor();
				break;
			case cat3 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedCategory3Factor();
				break;
			case cat2 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedCategory2Factor();
				break;
			case category4 :
				pAbortionMarriedFactor = pAbortionMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionMarriedCategory4Factor();
				break;
		}

		return pAbortionMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Miscarriage Married.
	 */

	public double pMiscarriageMarried() {

		double pMiscarriageMarriedFactor = 0.0;

		pMiscarriageMarriedFactor = getRelationshipsAndPregnancy()
				.getPMiscarriageMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarried15to19Factor();
				break;
			case years20to24 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarried20to24Factor();
				break;
			case years25to29 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarried25to29Factor();
				break;
			case years30to44 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedNHSFactor();
				break;
			case pHS :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedPHSFactor();
				break;
			case hS :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedOtherFactor();
				break;
			case black :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedBlackFactor();
				break;
			case hispanic :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedHispanicFactor();
				break;
			case white :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedCategory1Factor();
				break;
			case cat3 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedCategory3Factor();
				break;
			case cat2 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedCategory2Factor();
				break;
			case category4 :
				pMiscarriageMarriedFactor = pMiscarriageMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageMarriedCategory4Factor();
				break;
		}

		return pMiscarriageMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Coital Frequency Very Low Married.
	 */

	public double pCoitalFrequencyVeryLowMarried() {

		double pCoitalFrequencyVeryLowMarriedFactor = 0.0;

		pCoitalFrequencyVeryLowMarriedFactor = getRelationshipsAndPregnancy()
				.getPCoitalFrequencyVeryLowMarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyVeryLowMarriedFactor = pCoitalFrequencyVeryLowMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowMarriedCategory4Factor();
				break;
		}

		return pCoitalFrequencyVeryLowMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Marriage.
	 */

	public double pMarriage() {

		double pMarriageMinimum = 0.0;

		pMarriageMinimum = getRelationshipsAndPregnancy()
				.getPMarriageMinimumBase();
		switch (getGender()) {
			case female :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageFemaleMinimum();
				break;
			case male :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageMaleMinimum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriage15to19Minimum();
				break;
			case years20to24 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriage20to24Minimum();
				break;
			case years25to29 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriage25to29Minimum();
				break;
			case years30to44 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriage30to44Minimum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageNHSMinimum();
				break;
			case pHS :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriagePHSMinimum();
				break;
			case hS :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageHSMinimum();
				break;
		}
		switch (getRace()) {
			case other :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageOtherMinimum();
				break;
			case black :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageBlackMinimum();
				break;
			case hispanic :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageHispanicMinimum();
				break;
			case white :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageWhiteMinimum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory1Minimum();
				break;
			case cat3 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory3Minimum();
				break;
			case cat2 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory2Minimum();
				break;
			case category4 :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory4Minimum();
				break;
		}
		switch (getPregnancyStatus()) {
			case notPregnant :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriageNotPregnantMinimum();
				break;
			case pregnant :
				pMarriageMinimum = pMarriageMinimum
						+ getRelationshipsAndPregnancy()
								.getPMarriagePregnantMinimum();
				break;
		}

		double pMarriageMaximum = 0.0;

		pMarriageMaximum = getRelationshipsAndPregnancy()
				.getPMarriageMaximumBase();
		switch (getGender()) {
			case female :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageFemaleMaximum();
				break;
			case male :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageMaleMaximum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriage15to19Maximum();
				break;
			case years20to24 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriage20to24Maximum();
				break;
			case years25to29 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriage25to29Maximum();
				break;
			case years30to44 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriage30to44Maximum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageNHSMaximum();
				break;
			case pHS :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriagePHSMaximum();
				break;
			case hS :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageHSMaximum();
				break;
		}
		switch (getRace()) {
			case other :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageOtherMaximum();
				break;
			case black :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageBlackMaximum();
				break;
			case hispanic :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageHispanicMaximum();
				break;
			case white :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageWhiteMaximum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory1Maximum();
				break;
			case cat3 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory3Maximum();
				break;
			case cat2 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory2Maximum();
				break;
			case category4 :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageCategory4Maximum();
				break;
		}
		switch (getPregnancyStatus()) {
			case notPregnant :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriageNotPregnantMaximum();
				break;
			case pregnant :
				pMarriageMaximum = pMarriageMaximum
						+ getRelationshipsAndPregnancy()
								.getPMarriagePregnantMaximum();
				break;
		}

		return randomInRange(pMarriageMinimum, pMarriageMaximum);

	}

	/**
	 * metaabm::act::AEvaluate P Divorce.
	 */

	public double pDivorce() {

		double pDivorceMinimum = 0.0;

		pDivorceMinimum = getRelationshipsAndPregnancy()
				.getPDivorceMinimumBase();
		switch (getGender()) {
			case female :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceFemaleMinimum();
				break;
			case male :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceMaleMinimum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorce15to19Minimum();
				break;
			case years20to24 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorce20to24Minimum();
				break;
			case years25to29 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorce25to29Minimum();
				break;
			case years30to44 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorce30to44Minimum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceNHSMinimum();
				break;
			case pHS :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorcePHSMinimum();
				break;
			case hS :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy().getPDivorceHSMinimum();
				break;
		}
		switch (getRace()) {
			case other :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceOtherMinimum();
				break;
			case black :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceBlackMinimum();
				break;
			case hispanic :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceHispanicMinimum();
				break;
			case white :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceWhiteMinimum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory1Minimum();
				break;
			case cat3 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory3Minimum();
				break;
			case cat2 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory2Minimum();
				break;
			case category4 :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory4Minimum();
				break;
		}
		switch (getPregnancyStatus()) {
			case notPregnant :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorceNotPregnantMinimum();
				break;
			case pregnant :
				pDivorceMinimum = pDivorceMinimum
						+ getRelationshipsAndPregnancy()
								.getPDivorcePregnantMinimum();
				break;
		}

		double pDivorceMaximum = 0.0;

		pDivorceMaximum = getRelationshipsAndPregnancy()
				.getPDivorceMaximumBase();
		switch (getGender()) {
			case female :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceFemaleMaximum();
				break;
			case male :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceMaleMaximum();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorce15to19Maximum();
				break;
			case years20to24 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorce20to24Maximum();
				break;
			case years25to29 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorce25to29Maximum();
				break;
			case years30to44 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorce30to44Maximum();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceNHSMaximum();
				break;
			case pHS :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorcePHSMaximum();
				break;
			case hS :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy().getPDivorceHSMaximum();
				break;
		}
		switch (getRace()) {
			case other :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceOtherMaximum();
				break;
			case black :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceBlackMaximum();
				break;
			case hispanic :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceHispanicMaximum();
				break;
			case white :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceWhiteMaximum();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory1Maximum();
				break;
			case cat3 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory3Maximum();
				break;
			case cat2 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory2Maximum();
				break;
			case category4 :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceCategory4Maximum();
				break;
		}
		switch (getPregnancyStatus()) {
			case notPregnant :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorceNotPregnantMaximum();
				break;
			case pregnant :
				pDivorceMaximum = pDivorceMaximum
						+ getRelationshipsAndPregnancy()
								.getPDivorcePregnantMaximum();
				break;
		}

		return randomInRange(pDivorceMinimum, pDivorceMaximum);

	}

	/**
	 * metaabm::act::AEvaluate P Sterilize Male Married.
	 */

	public double pSterilizeMaleMarried() {

		double pSterilizeMaleMarriedFactor = 0.0;

		pSterilizeMaleMarriedFactor = getRelationshipsAndPregnancy()
				.getPSterilizeMaleMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedNHSFactor();
				break;
			case pHS :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedPHSFactor();
				break;
			case hS :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedOtherFactor();
				break;
			case black :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedHispanicFactor();
				break;
			case white :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeMaleMarriedFactor = pSterilizeMaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleMarriedOtherContraceptionFactor();
				break;
		}

		return pSterilizeMaleMarriedFactor;

	}

	/**
	 * Watch for changes in Births in Lifetime..
	 */

	public void birthEvent() {

		double pPoorBirthMarried = pPoorBirthMarried();

		double poorBirthDraw = getRandom().nextDouble();
		double birthEventPPoorBirthMarriedMultiplyMarriedCode = pPoorBirthMarried
				* getMarriedCode();
		double pPoorBirthUnmarried = pPoorBirthUnmarried();

		double birthEventPPoorBirthUnmarriedMultiplyUnmarriedCode = pPoorBirthUnmarried
				* getUnmarriedCode();
		double jointPPoorBirth = birthEventPPoorBirthMarriedMultiplyMarriedCode
				+ birthEventPPoorBirthUnmarriedMultiplyUnmarriedCode;
		{
			if (poorBirthDraw < jointPPoorBirth) {

				int birthEventIncrementPoorBirthsinLifetime = getPoorBirthsinLifetime() + 1;
				setPoorBirthsinLifetime(birthEventIncrementPoorBirthsinLifetime);
			}

		}

	}
	/**
	 * metaabm::act::AEvaluate P Poor Birth Married.
	 */

	public double pPoorBirthMarried() {

		double pPoorBirthMarriedFactor = 0.0;

		pPoorBirthMarriedFactor = getRelationshipsAndPregnancy()
				.getPPoorBirthMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarried15to19Factor();
				break;
			case years20to24 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarried20to24Factor();
				break;
			case years25to29 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarried25to29Factor();
				break;
			case years30to44 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedNHSFactor();
				break;
			case pHS :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedPHSFactor();
				break;
			case hS :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedOtherFactor();
				break;
			case black :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedBlackFactor();
				break;
			case hispanic :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedHispanicFactor();
				break;
			case white :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedCategory1Factor();
				break;
			case cat3 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedCategory3Factor();
				break;
			case cat2 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedCategory2Factor();
				break;
			case category4 :
				pPoorBirthMarriedFactor = pPoorBirthMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthMarriedCategory4Factor();
				break;
		}

		return pPoorBirthMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Coital Frequency Moderate Married.
	 */

	public double pCoitalFrequencyModerateMarried() {

		double pCoitalFrequencyModerateMarriedFactor = 0.0;

		pCoitalFrequencyModerateMarriedFactor = getRelationshipsAndPregnancy()
				.getPCoitalFrequencyModerateMarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyModerateMarriedFactor = pCoitalFrequencyModerateMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateMarriedCategory4Factor();
				break;
		}

		return pCoitalFrequencyModerateMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Coital Frequency Very Low Unmarried.
	 */

	public double pCoitalFrequencyVeryLowUnmarried() {

		double pCoitalFrequencyVeryLowUnmarriedFactor = 0.0;

		pCoitalFrequencyVeryLowUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPCoitalFrequencyVeryLowUnmarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyVeryLowUnmarriedFactor = pCoitalFrequencyVeryLowUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyVeryLowUnmarriedCategory4Factor();
				break;
		}

		return pCoitalFrequencyVeryLowUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Coital Frequency Moderate Unmarried.
	 */

	public double pCoitalFrequencyModerateUnmarried() {

		double pCoitalFrequencyModerateUnmarriedFactor = 0.0;

		pCoitalFrequencyModerateUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPCoitalFrequencyModerateUnmarriedFactorBase();
		switch (getGender()) {
			case female :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedFemaleFactor();
				break;
			case male :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedMaleFactor();
				break;
		}
		switch (getAgeGroup()) {
			case years15to19 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarried15to19Factor();
				break;
			case years20to24 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarried20to24Factor();
				break;
			case years25to29 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarried25to29Factor();
				break;
			case years30to44 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedNHSFactor();
				break;
			case pHS :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedPHSFactor();
				break;
			case hS :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedOtherFactor();
				break;
			case black :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedBlackFactor();
				break;
			case hispanic :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedHispanicFactor();
				break;
			case white :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedCategory1Factor();
				break;
			case cat3 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedCategory3Factor();
				break;
			case cat2 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedCategory2Factor();
				break;
			case category4 :
				pCoitalFrequencyModerateUnmarriedFactor = pCoitalFrequencyModerateUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPCoitalFrequencyModerateUnmarriedCategory4Factor();
				break;
		}

		return pCoitalFrequencyModerateUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Sterilize Female Married.
	 */

	public double pSterilizeFemaleMarried() {

		double pSterilizeFemaleMarriedFactor = 0.0;

		pSterilizeFemaleMarriedFactor = getRelationshipsAndPregnancy()
				.getPSterilizeFemaleMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedNHSFactor();
				break;
			case pHS :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedPHSFactor();
				break;
			case hS :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedOtherFactor();
				break;
			case black :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedHispanicFactor();
				break;
			case white :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeFemaleMarriedFactor = pSterilizeFemaleMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleMarriedOtherContraceptionFactor();
				break;
		}

		return pSterilizeFemaleMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Abortion Unmarried.
	 */

	public double pAbortionUnmarried() {

		double pAbortionUnmarriedFactor = 0.0;

		pAbortionUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPAbortionUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarried15to19Factor();
				break;
			case years20to24 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarried20to24Factor();
				break;
			case years25to29 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarried25to29Factor();
				break;
			case years30to44 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedNHSFactor();
				break;
			case pHS :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedPHSFactor();
				break;
			case hS :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedOtherFactor();
				break;
			case black :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedBlackFactor();
				break;
			case hispanic :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedHispanicFactor();
				break;
			case white :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedCategory1Factor();
				break;
			case cat3 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedCategory3Factor();
				break;
			case cat2 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedCategory2Factor();
				break;
			case category4 :
				pAbortionUnmarriedFactor = pAbortionUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPAbortionUnmarriedCategory4Factor();
				break;
		}

		return pAbortionUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Miscarriage Unmarried.
	 */

	public double pMiscarriageUnmarried() {

		double pMiscarriageUnmarriedFactor = 0.0;

		pMiscarriageUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPMiscarriageUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarried15to19Factor();
				break;
			case years20to24 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarried20to24Factor();
				break;
			case years25to29 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarried25to29Factor();
				break;
			case years30to44 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedNHSFactor();
				break;
			case pHS :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedPHSFactor();
				break;
			case hS :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedOtherFactor();
				break;
			case black :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedBlackFactor();
				break;
			case hispanic :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedHispanicFactor();
				break;
			case white :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedCategory1Factor();
				break;
			case cat3 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedCategory3Factor();
				break;
			case cat2 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedCategory2Factor();
				break;
			case category4 :
				pMiscarriageUnmarriedFactor = pMiscarriageUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMiscarriageUnmarriedCategory4Factor();
				break;
		}

		return pMiscarriageUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Poor Birth Unmarried.
	 */

	public double pPoorBirthUnmarried() {

		double pPoorBirthUnmarriedFactor = 0.0;

		pPoorBirthUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPPoorBirthUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarried15to19Factor();
				break;
			case years20to24 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarried20to24Factor();
				break;
			case years25to29 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarried25to29Factor();
				break;
			case years30to44 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedNHSFactor();
				break;
			case pHS :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedPHSFactor();
				break;
			case hS :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedOtherFactor();
				break;
			case black :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedBlackFactor();
				break;
			case hispanic :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedHispanicFactor();
				break;
			case white :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedCategory1Factor();
				break;
			case cat3 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedCategory3Factor();
				break;
			case cat2 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedCategory2Factor();
				break;
			case category4 :
				pPoorBirthUnmarriedFactor = pPoorBirthUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPoorBirthUnmarriedCategory4Factor();
				break;
		}

		return pPoorBirthUnmarriedFactor;

	}

	/**
	 * Watch for changes in P Sex..
	 */

	public void watchPSex() {

		{
			if (getMaritalStatus() == MaritalStatusEnum.married) {

				setPSexInitial(getPSex());
			}

			{
				if (!(getMaritalStatus() == MaritalStatusEnum.married)) {

					double watchPSexPSexMultiplyCoitalFrequencyInitialModification = getPSex()
							* getRelationshipsAndPregnancy()
									.getCoitalFrequencyInitialModification();
					setPSexInitial(watchPSexPSexMultiplyCoitalFrequencyInitialModification);
				}

			}
		}

	}

	/**
	 * metaabm::act::AEvaluate P Sterilize Male Unmarried.
	 */

	public double pSterilizeMaleUnmarried() {

		double pSterilizeMaleUnmarriedFactor = 0.0;

		pSterilizeMaleUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPSterilizeMaleUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedNHSFactor();
				break;
			case pHS :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedPHSFactor();
				break;
			case hS :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedOtherFactor();
				break;
			case black :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedHispanicFactor();
				break;
			case white :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeMaleUnmarriedFactor = pSterilizeMaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeMaleUnmarriedOtherContraceptionFactor();
				break;
		}

		return pSterilizeMaleUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Sterilize Female Unmarried.
	 */

	public double pSterilizeFemaleUnmarried() {

		double pSterilizeFemaleUnmarriedFactor = 0.0;

		pSterilizeFemaleUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPSterilizeFemaleUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarried15to19Factor();
				break;
			case years20to24 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarried20to24Factor();
				break;
			case years25to29 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarried25to29Factor();
				break;
			case years30to44 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedNHSFactor();
				break;
			case pHS :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedPHSFactor();
				break;
			case hS :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedOtherFactor();
				break;
			case black :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedBlackFactor();
				break;
			case hispanic :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedHispanicFactor();
				break;
			case white :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedCategory1Factor();
				break;
			case cat3 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedCategory3Factor();
				break;
			case cat2 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedCategory2Factor();
				break;
			case category4 :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pSterilizeFemaleUnmarriedFactor = pSterilizeFemaleUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPSterilizeFemaleUnmarriedOtherContraceptionFactor();
				break;
		}

		return pSterilizeFemaleUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Pill Use Unmarried.
	 */

	public double pPillUseUnmarried() {

		double pPillUseUnmarriedFactor = 0.0;

		pPillUseUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPPillUseUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarried15to19Factor();
				break;
			case years20to24 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarried20to24Factor();
				break;
			case years25to29 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarried25to29Factor();
				break;
			case years30to44 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedNHSFactor();
				break;
			case pHS :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedPHSFactor();
				break;
			case hS :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedOtherFactor();
				break;
			case black :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedBlackFactor();
				break;
			case hispanic :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedHispanicFactor();
				break;
			case white :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedCategory1Factor();
				break;
			case cat3 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedCategory3Factor();
				break;
			case cat2 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedCategory2Factor();
				break;
			case category4 :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pPillUseUnmarriedFactor = pPillUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseUnmarriedOtherContraceptionFactor();
				break;
		}

		return pPillUseUnmarriedFactor;

	}

	/**
	 * Watch for changes in Coital Behavior Type..
	 */

	public void watchCoitalBehaviorType() {

		{
			{
				{

					{
						if (true && getContraceptionMethod() != ContraceptionMethodEnum.sterilized) {

							double contraceptionUseDraw = getRandom()
									.nextDouble();
							{
								{
									if (getGender() == GenderEnum.female) {

										double pPillUseMarried = pPillUseMarried();

										double watchCoitalBehaviorTypePPillUseMarriedMultiplyMarriedCode = pPillUseMarried
												* getMarriedCode();
										double pPillUseUnmarried = pPillUseUnmarried();

										double watchCoitalBehaviorTypePPillUseUnmarriedMultiplyUnmarriedCode = pPillUseUnmarried
												* getUnmarriedCode();
										double jointPUseProbability = watchCoitalBehaviorTypePPillUseMarriedMultiplyMarriedCode
												+ watchCoitalBehaviorTypePPillUseUnmarriedMultiplyUnmarriedCode;
										{
											if (contraceptionUseDraw < jointPUseProbability) {

												setContraceptionMethod(ContraceptionMethodEnum.pill);
											}

											{
												if (!(contraceptionUseDraw < jointPUseProbability)) {

													setContraceptionMethod(ContraceptionMethodEnum.none);
												}

											}
										}
									}

									if (getGender() == GenderEnum.male) {

										double pHighCondomUseMarried = pHighCondomUseMarried();

										double watchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCode = pHighCondomUseMarried
												* getMarriedCode();
										double pHighCondomUseUnmarried = pHighCondomUseUnmarried();

										double watchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode = pHighCondomUseUnmarried
												* getUnmarriedCode();
										double watchCoitalBehaviorTypeWatchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCodeAddWatchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode = watchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCode
												+ watchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode;
										{
											if (contraceptionUseDraw < watchCoitalBehaviorTypeWatchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCodeAddWatchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode) {

												setContraceptionMethod(ContraceptionMethodEnum.condomHighIntender);
											}

											{
												if (!(contraceptionUseDraw < watchCoitalBehaviorTypeWatchCoitalBehaviorTypePHighCondomUseMarriedMultiplyMarriedCodeAddWatchCoitalBehaviorTypePHighCondomUseUnmarriedMultiplyUnmarriedCode)) {

													double pMediumCondomUseMarried = pMediumCondomUseMarried();

													double watchCoitalBehaviorTypePMediumCondomUseMarriedMultiplyMarriedCode = pMediumCondomUseMarried
															* getMarriedCode();
													double pMediumCondomUseUnmarried = pMediumCondomUseUnmarried();

													double pMediumCondomUseUnmarriedCode = pMediumCondomUseUnmarried
															* getUnmarriedCode();
													double jointMediumProbability = watchCoitalBehaviorTypePMediumCondomUseMarriedMultiplyMarriedCode
															+ pMediumCondomUseUnmarriedCode;
													{
														if (contraceptionUseDraw < jointMediumProbability) {

															setContraceptionMethod(ContraceptionMethodEnum.condomMediumIntender);
														}

														{
															if (!(contraceptionUseDraw < jointMediumProbability)) {

																setContraceptionMethod(ContraceptionMethodEnum.none);
															}

														}
													}
												}

											}
										}
									}

								}
							}
						}

					}

					if (getMaritalStatus() == MaritalStatusEnum.married) {

						double coitalDaysMarried = coitalDaysMarried();

						double watchCoitalBehaviorTypeCoitalDaysMarriedDivideLunarDays = coitalDaysMarried
								/ getRelationshipsAndPregnancy().getLunarDays();
						setPSex(watchCoitalBehaviorTypeCoitalDaysMarriedDivideLunarDays);
					}

					if (getMaritalStatus() != MaritalStatusEnum.married) {

						double coitalDaysUnmarried = coitalDaysUnmarried();

						double watchCoitalBehaviorTypeCoitalDaysUnmarriedDivideLunarDays = coitalDaysUnmarried
								/ getRelationshipsAndPregnancy().getLunarDays();
						setPSex(watchCoitalBehaviorTypeCoitalDaysUnmarriedDivideLunarDays);
					}

				}
			}
		}

	}
	/**
	 * metaabm::act::AEvaluate P Pill Use Married.
	 */

	public double pPillUseMarried() {

		double pPillUseMarriedFactor = 0.0;

		pPillUseMarriedFactor = getRelationshipsAndPregnancy()
				.getPPillUseMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarried15to19Factor();
				break;
			case years20to24 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarried20to24Factor();
				break;
			case years25to29 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarried25to29Factor();
				break;
			case years30to44 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedNHSFactor();
				break;
			case pHS :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedPHSFactor();
				break;
			case hS :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedOtherFactor();
				break;
			case black :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedBlackFactor();
				break;
			case hispanic :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedHispanicFactor();
				break;
			case white :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedCategory1Factor();
				break;
			case cat3 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedCategory3Factor();
				break;
			case cat2 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedCategory2Factor();
				break;
			case category4 :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pPillUseMarriedFactor = pPillUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPPillUseMarriedOtherContraceptionFactor();
				break;
		}

		return pPillUseMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P High Condom Use Married.
	 */

	public double pHighCondomUseMarried() {

		double pHighCondomUseMarriedFactor = 0.0;

		pHighCondomUseMarriedFactor = getRelationshipsAndPregnancy()
				.getPHighCondomUseMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarried15to19Factor();
				break;
			case years20to24 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarried20to24Factor();
				break;
			case years25to29 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarried25to29Factor();
				break;
			case years30to44 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedNHSFactor();
				break;
			case pHS :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedPHSFactor();
				break;
			case hS :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedOtherFactor();
				break;
			case black :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedBlackFactor();
				break;
			case hispanic :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedHispanicFactor();
				break;
			case white :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedCategory1Factor();
				break;
			case cat3 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedCategory3Factor();
				break;
			case cat2 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedCategory2Factor();
				break;
			case category4 :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedCategory4Factor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedOtherContraceptionFactor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pHighCondomUseMarriedFactor = pHighCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseMarriedModerateFrequencyFactor();
				break;
		}

		return pHighCondomUseMarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Medium Condom Use Unmarried.
	 */

	public double pMediumCondomUseUnmarried() {

		double pMediumCondomUseUnmarriedFactor = 0.0;

		pMediumCondomUseUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPMediumCondomUseUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarried15to19Factor();
				break;
			case years20to24 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarried20to24Factor();
				break;
			case years25to29 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarried25to29Factor();
				break;
			case years30to44 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedNHSFactor();
				break;
			case pHS :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedPHSFactor();
				break;
			case hS :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedOtherFactor();
				break;
			case black :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedBlackFactor();
				break;
			case hispanic :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedHispanicFactor();
				break;
			case white :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedCategory1Factor();
				break;
			case cat3 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedCategory3Factor();
				break;
			case cat2 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedCategory2Factor();
				break;
			case category4 :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pMediumCondomUseUnmarriedFactor = pMediumCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseUnmarriedOtherContraceptionFactor();
				break;
		}

		return pMediumCondomUseUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P High Condom Use Unmarried.
	 */

	public double pHighCondomUseUnmarried() {

		double pHighCondomUseUnmarriedFactor = 0.0;

		pHighCondomUseUnmarriedFactor = getRelationshipsAndPregnancy()
				.getPHighCondomUseUnmarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarried15to19Factor();
				break;
			case years20to24 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarried20to24Factor();
				break;
			case years25to29 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarried25to29Factor();
				break;
			case years30to44 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedNHSFactor();
				break;
			case pHS :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedPHSFactor();
				break;
			case hS :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedOtherFactor();
				break;
			case black :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedBlackFactor();
				break;
			case hispanic :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedHispanicFactor();
				break;
			case white :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedCategory1Factor();
				break;
			case cat3 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedCategory3Factor();
				break;
			case cat2 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedCategory2Factor();
				break;
			case category4 :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pHighCondomUseUnmarriedFactor = pHighCondomUseUnmarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPHighCondomUseUnmarriedOtherContraceptionFactor();
				break;
		}

		return pHighCondomUseUnmarriedFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Medium Condom Use Married.
	 */

	public double pMediumCondomUseMarried() {

		double pMediumCondomUseMarriedFactor = 0.0;

		pMediumCondomUseMarriedFactor = getRelationshipsAndPregnancy()
				.getPMediumCondomUseMarriedFactorBase();
		switch (getAgeGroup()) {
			case years15to19 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarried15to19Factor();
				break;
			case years20to24 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarried20to24Factor();
				break;
			case years25to29 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarried25to29Factor();
				break;
			case years30to44 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarried30to44Factor();
				break;
		}
		switch (getEducation()) {
			case nHS :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedNHSFactor();
				break;
			case pHS :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedPHSFactor();
				break;
			case hS :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedHSFactor();
				break;
		}
		switch (getRace()) {
			case other :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedOtherFactor();
				break;
			case black :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedBlackFactor();
				break;
			case hispanic :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedHispanicFactor();
				break;
			case white :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedWhiteFactor();
				break;
		}
		switch (getSES()) {
			case cat1 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedCategory1Factor();
				break;
			case cat3 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedCategory3Factor();
				break;
			case cat2 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedCategory2Factor();
				break;
			case category4 :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedCategory4Factor();
				break;
		}
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedVeryLowFrequencyFactor();
				break;
			case highFrequency :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedHighFrequencyFactor();
				break;
			case moderateFrequency :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedModerateFrequencyFactor();
				break;
		}
		switch (getPartnerContraceptionMethod()) {
			case partnerSterilized :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedPartnerSterilizedFactor();
				break;
			case otherContraception :
				pMediumCondomUseMarriedFactor = pMediumCondomUseMarriedFactor
						+ getRelationshipsAndPregnancy()
								.getPMediumCondomUseMarriedOtherContraceptionFactor();
				break;
		}

		return pMediumCondomUseMarriedFactor;

	}

	/**
	 * Watch for changes in Gender..
	 */

	public void watchGender() {

		{
			if (getGender() == GenderEnum.female) {

				setFemaleCode(1);
				setMaleCode(0);
			}

			{
				if (!(getGender() == GenderEnum.female)) {

					setFemaleCode(0);
					setMaleCode(1);
				}

			}
		}

	}
	/**
	 * metaabm::act::AEvaluate Coital Days Married.
	 */

	public double coitalDaysMarried() {

		double coitalDaysMarriedMinimum = 0.0;

		coitalDaysMarriedMinimum = getRelationshipsAndPregnancy()
				.getCoitalDaysMarriedMinimumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysMarriedMinimum = coitalDaysMarriedMinimum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysMarriedVeryLowFrequencyMinimum();
				break;
			case highFrequency :
				coitalDaysMarriedMinimum = coitalDaysMarriedMinimum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysMarriedHighFrequencyMinimum();
				break;
			case moderateFrequency :
				coitalDaysMarriedMinimum = coitalDaysMarriedMinimum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysMarriedModerateFrequencyMinimum();
				break;
		}

		double coitalDaysMarriedMaximum = 0.0;

		coitalDaysMarriedMaximum = getRelationshipsAndPregnancy()
				.getCoitalDaysMarriedMaximumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysMarriedMaximum = coitalDaysMarriedMaximum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysMarriedVeryLowFrequencyMaximum();
				break;
			case highFrequency :
				coitalDaysMarriedMaximum = coitalDaysMarriedMaximum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysMarriedHighFrequencyMaximum();
				break;
			case moderateFrequency :
				coitalDaysMarriedMaximum = coitalDaysMarriedMaximum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysMarriedModerateFrequencyMaximum();
				break;
		}

		return randomInRange(coitalDaysMarriedMinimum, coitalDaysMarriedMaximum);

	}

	/**
	 * metaabm::act::AEvaluate Coital Days Unmarried.
	 */

	public double coitalDaysUnmarried() {

		double coitalDaysUnmarriedMinimum = 0.0;

		coitalDaysUnmarriedMinimum = getRelationshipsAndPregnancy()
				.getCoitalDaysUnmarriedMinimumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysUnmarriedMinimum = coitalDaysUnmarriedMinimum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysUnmarriedVeryLowFrequencyMinimum();
				break;
			case highFrequency :
				coitalDaysUnmarriedMinimum = coitalDaysUnmarriedMinimum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysUnmarriedHighFrequencyMinimum();
				break;
			case moderateFrequency :
				coitalDaysUnmarriedMinimum = coitalDaysUnmarriedMinimum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysUnmarriedModerateFrequencyMinimum();
				break;
		}

		double coitalDaysUnmarriedMaximum = 0.0;

		coitalDaysUnmarriedMaximum = getRelationshipsAndPregnancy()
				.getCoitalDaysUnmarriedMaximumBase();
		switch (getCoitalBehaviorType()) {
			case veryLowFrequency :
				coitalDaysUnmarriedMaximum = coitalDaysUnmarriedMaximum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysUnmarriedVeryLowFrequencyMaximum();
				break;
			case highFrequency :
				coitalDaysUnmarriedMaximum = coitalDaysUnmarriedMaximum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysUnmarriedHighFrequencyMaximum();
				break;
			case moderateFrequency :
				coitalDaysUnmarriedMaximum = coitalDaysUnmarriedMaximum
						+ getRelationshipsAndPregnancy()
								.getCoitalDaysUnmarriedModerateFrequencyMaximum();
				break;
		}

		return randomInRange(coitalDaysUnmarriedMinimum,
				coitalDaysUnmarriedMaximum);

	}

	/**
	 * metaabm::act::AEvaluate P Rhythm Method.
	 */

	public double pRhythmMethod() {

		double pRhythmMethod = 0.0;
		if (getMaritalStatus() == MaritalStatusEnum.married) {
			if (getContraceptionMethod() == ContraceptionMethodEnum.none) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodMarriedNone();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodMarriedSterilized();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.pill) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodMarriedPill();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodMarriedCondomMediumIntender();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodMarriedCondomHighIntender();

			}

		} else if (getMaritalStatus() == MaritalStatusEnum.single) {
			if (getContraceptionMethod() == ContraceptionMethodEnum.none) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodSingleNone();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodSingleSterilized();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.pill) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodSinglePill();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodSingleCondomMediumIntender();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodSingleCondomHighIntender();

			}

		} else if (getMaritalStatus() == MaritalStatusEnum.divorced) {
			if (getContraceptionMethod() == ContraceptionMethodEnum.none) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodDivorcedNone();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.sterilized) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodDivorcedSterilized();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.pill) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodDivorcedPill();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomMediumIntender) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodDivorcedCondomMediumIntender();

			} else if (getContraceptionMethod() == ContraceptionMethodEnum.condomHighIntender) {
				pRhythmMethod = getRelationshipsAndPregnancy()
						.getPRhythmMethodDivorcedCondomHighIntender();

			}

		}

		return pRhythmMethod;

	}

	/**
	 * Watch for changes in Contraception Method..
	 */

	public void watchContraceptionMethod() {

		{
			if (getGender() == GenderEnum.female) {

				double pRhythmMethod = pRhythmMethod();

				double rhythmMethodDraw = getRandom().nextDouble();
				{
					if (rhythmMethodDraw < pRhythmMethod) {

						setRhythmMethodUser(true);
					}

					{
						if (!(rhythmMethodDraw < pRhythmMethod)) {

							setRhythmMethodUser(false);
						}

					}
				}
			}

		}

	}

	/**
	 * metaabm::act::AEvaluate P Pill Failure.
	 */

	public double pPillFailure() {

		double pPillFailureFactor = 0.0;

		pPillFailureFactor = getRelationshipsAndPregnancy()
				.getPPillFailureFactorBase();
		switch (getRace()) {
			case other :
				pPillFailureFactor = pPillFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillFailureOtherFactor();
				break;
			case black :
				pPillFailureFactor = pPillFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillFailureBlackFactor();
				break;
			case hispanic :
				pPillFailureFactor = pPillFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillFailureHispanicFactor();
				break;
			case white :
				pPillFailureFactor = pPillFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillFailureWhiteFactor();
				break;
		}

		return pPillFailureFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Pill Condom Failure.
	 */

	public double pPillCondomFailure() {

		double pPillCondomFailureFactor = 0.0;

		pPillCondomFailureFactor = getRelationshipsAndPregnancy()
				.getPPillCondomFailureFactorBase();
		switch (getRace()) {
			case other :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillCondomFailureOtherFactor();
				break;
			case black :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillCondomFailureBlackFactor();
				break;
			case hispanic :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillCondomFailureHispanicFactor();
				break;
			case white :
				pPillCondomFailureFactor = pPillCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPPillCondomFailureWhiteFactor();
				break;
		}

		return pPillCondomFailureFactor;

	}

	/**
	 * metaabm::act::AEvaluate P Condom Failure.
	 */

	public double pCondomFailure() {

		double pCondomFailureFactor = 0.0;

		pCondomFailureFactor = getRelationshipsAndPregnancy()
				.getPCondomFailureFactorBase();
		switch (getRace()) {
			case other :
				pCondomFailureFactor = pCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPCondomFailureOtherFactor();
				break;
			case black :
				pCondomFailureFactor = pCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPCondomFailureBlackFactor();
				break;
			case hispanic :
				pCondomFailureFactor = pCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPCondomFailureHispanicFactor();
				break;
			case white :
				pCondomFailureFactor = pCondomFailureFactor
						+ getRelationshipsAndPregnancy()
								.getPCondomFailureWhiteFactor();
				break;
		}

		return pCondomFailureFactor;

	}

	/**
	 * Gets the Gender property for Adult.
	 * @return 
	 */

	public GenderEnum getGender() {
		return gender;
	}

	/**
	 * Sets the Gender property for Adult.
	 * 
	 * @param _gender the new Gender value
	 */

	public void setGender(GenderEnum _gender) {
		gender = _gender;
		watchGender();
	}
	/**
	 * Gets the Age in Years property for Adult.
	 * @return 
	 */

	public int getAgeinYears() {
		return ageinYears;
	}

	/**
	 * Sets the Age in Years property for Adult.
	 * 
	 * @param _ageinYears the new Age in Years value
	 */

	public void setAgeinYears(int _ageinYears) {
		ageinYears = _ageinYears;
	}
	/**
	 * Gets the Age in Years Index property for Adult.
	 * @return 
	 */

	public int getAgeinYearsIndex() {
		return ageinYearsIndex;
	}

	/**
	 * Sets the Age in Years Index property for Adult.
	 * 
	 * @param _ageinYearsIndex the new Age in Years Index value
	 */

	public void setAgeinYearsIndex(int _ageinYearsIndex) {
		ageinYearsIndex = _ageinYearsIndex;
	}
	/**
	 * Gets the Age Group property for Adult.
	 * @return 
	 */

	public AgeGroupEnum getAgeGroup() {
		return ageGroup;
	}

	/**
	 * Sets the Age Group property for Adult.
	 * 
	 * @param _ageGroup the new Age Group value
	 */

	public void setAgeGroup(AgeGroupEnum _ageGroup) {
		ageGroup = _ageGroup;
	}
	/**
	 * Gets the Education property for Adult.
	 * @return 
	 */

	public EducationEnum getEducation() {
		return education;
	}

	/**
	 * Sets the Education property for Adult.
	 * 
	 * @param _education the new Education value
	 */

	public void setEducation(EducationEnum _education) {
		education = _education;
	}
	/**
	 * Gets the In Relationship property for Adult.
	 * @return 
	 */

	public boolean isInRelationship() {
		return inRelationship;
	}

	/**
	 * Sets the In Relationship property for Adult.
	 * 
	 * @param _inRelationship the new In Relationship value
	 */

	public void setInRelationship(boolean _inRelationship) {
		inRelationship = _inRelationship;
		watchInRelationship();
	}
	/**
	 * Gets the Marital Status property for Adult.
	 * @return 
	 */

	public MaritalStatusEnum getMaritalStatus() {
		return maritalStatus;
	}

	/**
	 * Sets the Marital Status property for Adult.
	 * 
	 * @param _maritalStatus the new Marital Status value
	 */

	public void setMaritalStatus(MaritalStatusEnum _maritalStatus) {
		maritalStatus = _maritalStatus;
	}
	/**
	 * Gets the Contraception Method property for Adult.
	 * @return 
	 */

	public ContraceptionMethodEnum getContraceptionMethod() {
		return contraceptionMethod;
	}

	/**
	 * Sets the Contraception Method property for Adult.
	 * 
	 * @param _contraceptionMethod the new Contraception Method value
	 */

	public void setContraceptionMethod(
			ContraceptionMethodEnum _contraceptionMethod) {
		contraceptionMethod = _contraceptionMethod;
		watchContraceptionMethod();
	}
	/**
	 * Gets the Rhythm Method User property for Adult.
	 * @return 
	 */

	public boolean isRhythmMethodUser() {
		return rhythmMethodUser;
	}

	/**
	 * Sets the Rhythm Method User property for Adult.
	 * 
	 * @param _rhythmMethodUser the new Rhythm Method User value
	 */

	public void setRhythmMethodUser(boolean _rhythmMethodUser) {
		rhythmMethodUser = _rhythmMethodUser;
	}
	/**
	 * Gets the Projected Day of Birth property for Adult.
	 * @return 
	 */

	public int getProjectedDayofBirth() {
		return projectedDayofBirth;
	}

	/**
	 * Sets the Projected Day of Birth property for Adult.
	 * 
	 * @param _projectedDayofBirth the new Projected Day of Birth value
	 */

	public void setProjectedDayofBirth(int _projectedDayofBirth) {
		projectedDayofBirth = _projectedDayofBirth;
	}
	/**
	 * Gets the Projected Day of Miscarriage property for Adult.
	 * @return The day on which last miscarriage occurs or will occur. Zero if no such event.
	 */

	public int getProjectedDayofMiscarriage() {
		return projectedDayofMiscarriage;
	}

	/**
	 * Sets the Projected Day of Miscarriage property for Adult.
	 * The day on which last miscarriage occurs or will occur. Zero if no such event.
	 * @param _projectedDayofMiscarriage the new Projected Day of Miscarriage value
	 */

	public void setProjectedDayofMiscarriage(int _projectedDayofMiscarriage) {
		projectedDayofMiscarriage = _projectedDayofMiscarriage;
	}
	/**
	 * Gets the Projected Day of Abortion property for Adult.
	 * @return The day on which last abortion occurred or will occur. Zero if no such event.
	 */

	public int getProjectedDayofAbortion() {
		return projectedDayofAbortion;
	}

	/**
	 * Sets the Projected Day of Abortion property for Adult.
	 * The day on which last abortion occurred or will occur. Zero if no such event.
	 * @param _projectedDayofAbortion the new Projected Day of Abortion value
	 */

	public void setProjectedDayofAbortion(int _projectedDayofAbortion) {
		projectedDayofAbortion = _projectedDayofAbortion;
	}
	/**
	 * Gets the P Relationship Initial property for Adult.
	 * @return My desire to enter into a relationship with a member of the opposite sex, given that I am not currently in a relationship. 
	 */

	public double getPRelationshipInitial() {
		return pRelationshipInitial;
	}

	/**
	 * Sets the P Relationship Initial property for Adult.
	 * My desire to enter into a relationship with a member of the opposite sex, given that I am not currently in a relationship. 
	 * @param _pRelationshipInitial the new P Relationship Initial value
	 */

	public void setPRelationshipInitial(double _pRelationshipInitial) {
		pRelationshipInitial = _pRelationshipInitial;
	}
	/**
	 * Gets the P End Relationship property for Adult.
	 * @return Given that I am currently in a relationship, the likelihood that I wish to remain in that relationship for the current period.
	 */

	public double getPEndRelationship() {
		return pEndRelationship;
	}

	/**
	 * Sets the P End Relationship property for Adult.
	 * Given that I am currently in a relationship, the likelihood that I wish to remain in that relationship for the current period.
	 * @param _pEndRelationship the new P End Relationship value
	 */

	public void setPEndRelationship(double _pEndRelationship) {
		pEndRelationship = _pEndRelationship;
	}
	/**
	 * Gets the P Marriage property for Adult.
	 * @return The probability that this agent will become married on a given day, ignoring pregnancy status.
	 */

	public double getPMarriage() {
		return pMarriage;
	}

	/**
	 * Sets the P Marriage property for Adult.
	 * The probability that this agent will become married on a given day, ignoring pregnancy status.
	 * @param _pMarriage the new P Marriage value
	 */

	public void setPMarriage(double _pMarriage) {
		pMarriage = _pMarriage;
	}
	/**
	 * Gets the P Divorce property for Adult.
	 * @return 
	 */

	public double getPDivorce() {
		return pDivorce;
	}

	/**
	 * Sets the P Divorce property for Adult.
	 * 
	 * @param _pDivorce the new P Divorce value
	 */

	public void setPDivorce(double _pDivorce) {
		pDivorce = _pDivorce;
	}
	/**
	 * Gets the P Sex property for Adult.
	 * @return Given that I am in a relationship with a partner with whom I have not had sex, the likilihood that I wish to engage in sex with that partner during given period.
	 */

	public double getPSex() {
		return pSex;
	}

	/**
	 * Sets the P Sex property for Adult.
	 * Given that I am in a relationship with a partner with whom I have not had sex, the likilihood that I wish to engage in sex with that partner during given period.
	 * @param _pSex the new P Sex value
	 */

	public void setPSex(double _pSex) {
		pSex = _pSex;
		watchPSex();
	}
	/**
	 * Gets the P Sex Initial property for Adult.
	 * @return Given that I continue in a relationship with whom I've had sex, the likilihood that I wish to engage in sex with that same partner during given period.
	 */

	public double getPSexInitial() {
		return pSexInitial;
	}

	/**
	 * Sets the P Sex Initial property for Adult.
	 * Given that I continue in a relationship with whom I've had sex, the likilihood that I wish to engage in sex with that same partner during given period.
	 * @param _pSexInitial the new P Sex Initial value
	 */

	public void setPSexInitial(double _pSexInitial) {
		pSexInitial = _pSexInitial;
	}
	/**
	 * Gets the Sex Count in Relationship property for Adult.
	 * @return 
	 */

	public int getSexCountinRelationship() {
		return sexCountinRelationship;
	}

	/**
	 * Sets the Sex Count in Relationship property for Adult.
	 * 
	 * @param _sexCountinRelationship the new Sex Count in Relationship value
	 */

	public void setSexCountinRelationship(int _sexCountinRelationship) {
		sexCountinRelationship = _sexCountinRelationship;
		sexinRelationshipEvent();
	}
	/**
	 * Gets the Day in Cycle property for Adult.
	 * @return 
	 */

	public int getDayinCycle() {
		return dayinCycle;
	}

	/**
	 * Sets the Day in Cycle property for Adult.
	 * 
	 * @param _dayinCycle the new Day in Cycle value
	 */

	public void setDayinCycle(int _dayinCycle) {
		dayinCycle = _dayinCycle;
	}
	/**
	 * Gets the Sex Count in Lifetime property for Adult.
	 * @return 
	 */

	public int getSexCountinLifetime() {
		return sexCountinLifetime;
	}

	/**
	 * Sets the Sex Count in Lifetime property for Adult.
	 * 
	 * @param _sexCountinLifetime the new Sex Count in Lifetime value
	 */

	public void setSexCountinLifetime(int _sexCountinLifetime) {
		sexCountinLifetime = _sexCountinLifetime;
		sexEvent();
	}
	/**
	 * Gets the Days in Current Relationship property for Adult.
	 * @return 
	 */

	public int getDaysinCurrentRelationship() {
		return daysinCurrentRelationship;
	}

	/**
	 * Sets the Days in Current Relationship property for Adult.
	 * 
	 * @param _daysinCurrentRelationship the new Days in Current Relationship value
	 */

	public void setDaysinCurrentRelationship(int _daysinCurrentRelationship) {
		daysinCurrentRelationship = _daysinCurrentRelationship;
	}
	/**
	 * Gets the Sex Partners in Lifetime property for Adult.
	 * @return 
	 */

	public int getSexPartnersinLifetime() {
		return sexPartnersinLifetime;
	}

	/**
	 * Sets the Sex Partners in Lifetime property for Adult.
	 * 
	 * @param _sexPartnersinLifetime the new Sex Partners in Lifetime value
	 */

	public void setSexPartnersinLifetime(int _sexPartnersinLifetime) {
		sexPartnersinLifetime = _sexPartnersinLifetime;
	}
	/**
	 * Gets the Day of Last Sex property for Adult.
	 * @return The last day in which sex occurred.  Zero if no such event.
	 */

	public int getDayofLastSex() {
		return dayofLastSex;
	}

	/**
	 * Sets the Day of Last Sex property for Adult.
	 * The last day in which sex occurred.  Zero if no such event.
	 * @param _dayofLastSex the new Day of Last Sex value
	 */

	public void setDayofLastSex(int _dayofLastSex) {
		dayofLastSex = _dayofLastSex;
	}
	/**
	 * Gets the Pregnancies in Lifetime property for Adult.
	 * @return 
	 */

	public int getPregnanciesinLifetime() {
		return pregnanciesinLifetime;
	}

	/**
	 * Sets the Pregnancies in Lifetime property for Adult.
	 * 
	 * @param _pregnanciesinLifetime the new Pregnancies in Lifetime value
	 */

	public void setPregnanciesinLifetime(int _pregnanciesinLifetime) {
		pregnanciesinLifetime = _pregnanciesinLifetime;
	}
	/**
	 * Gets the Births in Lifetime property for Adult.
	 * @return The total number of live birth events.
	 */

	public int getBirthsinLifetime() {
		return birthsinLifetime;
	}

	/**
	 * Sets the Births in Lifetime property for Adult.
	 * The total number of live birth events.
	 * @param _birthsinLifetime the new Births in Lifetime value
	 */

	public void setBirthsinLifetime(int _birthsinLifetime) {
		birthsinLifetime = _birthsinLifetime;
		birthEvent();
	}
	/**
	 * Gets the Abortions in Lifetime property for Adult.
	 * @return 
	 */

	public int getAbortionsinLifetime() {
		return abortionsinLifetime;
	}

	/**
	 * Sets the Abortions in Lifetime property for Adult.
	 * 
	 * @param _abortionsinLifetime the new Abortions in Lifetime value
	 */

	public void setAbortionsinLifetime(int _abortionsinLifetime) {
		abortionsinLifetime = _abortionsinLifetime;
	}
	/**
	 * Gets the Miscarriages in Lifetime property for Adult.
	 * @return 
	 */

	public int getMiscarriagesinLifetime() {
		return miscarriagesinLifetime;
	}

	/**
	 * Sets the Miscarriages in Lifetime property for Adult.
	 * 
	 * @param _miscarriagesinLifetime the new Miscarriages in Lifetime value
	 */

	public void setMiscarriagesinLifetime(int _miscarriagesinLifetime) {
		miscarriagesinLifetime = _miscarriagesinLifetime;
	}
	/**
	 * Gets the Ratio Pregnancies to Sex Events property for Adult.
	 * @return 
	 */

	public double getRatioPregnanciestoSexEvents() {
		return ratioPregnanciestoSexEvents;
	}

	/**
	 * Sets the Ratio Pregnancies to Sex Events property for Adult.
	 * 
	 * @param _ratioPregnanciestoSexEvents the new Ratio Pregnancies to Sex Events value
	 */

	public void setRatioPregnanciestoSexEvents(
			double _ratioPregnanciestoSexEvents) {
		ratioPregnanciestoSexEvents = _ratioPregnanciestoSexEvents;
	}
	/**
	 * Gets the Poor Births in Lifetime property for Adult.
	 * @return 
	 */

	public int getPoorBirthsinLifetime() {
		return poorBirthsinLifetime;
	}

	/**
	 * Sets the Poor Births in Lifetime property for Adult.
	 * 
	 * @param _poorBirthsinLifetime the new Poor Births in Lifetime value
	 */

	public void setPoorBirthsinLifetime(int _poorBirthsinLifetime) {
		poorBirthsinLifetime = _poorBirthsinLifetime;
	}
	/**
	 * Gets the Race property for Adult.
	 * @return 
	 */

	public RaceEnum getRace() {
		return race;
	}

	/**
	 * Sets the Race property for Adult.
	 * 
	 * @param _race the new Race value
	 */

	public void setRace(RaceEnum _race) {
		race = _race;
	}
	/**
	 * Gets the SES property for Adult.
	 * @return Socio-Economic Category. Currently defined by mother's education level, i.e. high school, high-school degree, some college, at least a college degree.
	 */

	public SESEnum getSES() {
		return sES;
	}

	/**
	 * Sets the SES property for Adult.
	 * Socio-Economic Category. Currently defined by mother's education level, i.e. high school, high-school degree, some college, at least a college degree.
	 * @param _sES the new SES value
	 */

	public void setSES(SESEnum _sES) {
		sES = _sES;
	}
	/**
	 * Gets the Coital Behavior Type property for Adult.
	 * @return 
	 */

	public CoitalBehaviorTypeEnum getCoitalBehaviorType() {
		return coitalBehaviorType;
	}

	/**
	 * Sets the Coital Behavior Type property for Adult.
	 * 
	 * @param _coitalBehaviorType the new Coital Behavior Type value
	 */

	public void setCoitalBehaviorType(CoitalBehaviorTypeEnum _coitalBehaviorType) {
		coitalBehaviorType = _coitalBehaviorType;
		watchCoitalBehaviorType();
	}
	/**
	 * Gets the Married Code property for Adult.
	 * @return 
	 */

	public int getMarriedCode() {
		return marriedCode;
	}

	/**
	 * Sets the Married Code property for Adult.
	 * 
	 * @param _marriedCode the new Married Code value
	 */

	public void setMarriedCode(int _marriedCode) {
		marriedCode = _marriedCode;
	}
	/**
	 * Gets the Unmarried Code property for Adult.
	 * @return 
	 */

	public int getUnmarriedCode() {
		return unmarriedCode;
	}

	/**
	 * Sets the Unmarried Code property for Adult.
	 * 
	 * @param _unmarriedCode the new Unmarried Code value
	 */

	public void setUnmarriedCode(int _unmarriedCode) {
		unmarriedCode = _unmarriedCode;
	}
	/**
	 * Gets the ID property for Adult.
	 * @return 
	 */

	public int getID() {
		return iD;
	}

	/**
	 * Sets the ID property for Adult.
	 * 
	 * @param _iD the new ID value
	 */

	public void setID(int _iD) {
		iD = _iD;
	}
	/**
	 * Gets the Spouse ID property for Adult.
	 * @return 
	 */

	public int getSpouseID() {
		return spouseID;
	}

	/**
	 * Sets the Spouse ID property for Adult.
	 * 
	 * @param _spouseID the new Spouse ID value
	 */

	public void setSpouseID(int _spouseID) {
		spouseID = _spouseID;
	}
	/**
	 * Gets the Male Code property for Adult.
	 * @return 0 for female, 1 for male.
	 */

	public int getMaleCode() {
		return maleCode;
	}

	/**
	 * Sets the Male Code property for Adult.
	 * 0 for female, 1 for male.
	 * @param _maleCode the new Male Code value
	 */

	public void setMaleCode(int _maleCode) {
		maleCode = _maleCode;
	}
	/**
	 * Gets the Female Code property for Adult.
	 * @return 
	 */

	public int getFemaleCode() {
		return femaleCode;
	}

	/**
	 * Sets the Female Code property for Adult.
	 * 
	 * @param _femaleCode the new Female Code value
	 */

	public void setFemaleCode(int _femaleCode) {
		femaleCode = _femaleCode;
	}
	/**
	 * Gets the Partner Contraception Method property for Adult.
	 * @return 
	 */

	public PartnerContraceptionMethodEnum getPartnerContraceptionMethod() {
		return partnerContraceptionMethod;
	}

	/**
	 * Sets the Partner Contraception Method property for Adult.
	 * 
	 * @param _partnerContraceptionMethod the new Partner Contraception Method value
	 */

	public void setPartnerContraceptionMethod(
			PartnerContraceptionMethodEnum _partnerContraceptionMethod) {
		partnerContraceptionMethod = _partnerContraceptionMethod;
	}
	/**
	 * Gets the Sterilization Choices property for Adult.
	 * @return 
	 */

	public int getSterilizationChoices() {
		return sterilizationChoices;
	}

	/**
	 * Sets the Sterilization Choices property for Adult.
	 * 
	 * @param _sterilizationChoices the new Sterilization Choices value
	 */

	public void setSterilizationChoices(int _sterilizationChoices) {
		sterilizationChoices = _sterilizationChoices;
	}
	/**
	 * Gets the Pregnancy Status property for Adult.
	 * @return 
	 */

	public PregnancyStatusEnum getPregnancyStatus() {
		return pregnancyStatus;
	}

	/**
	 * Sets the Pregnancy Status property for Adult.
	 * 
	 * @param _pregnancyStatus the new Pregnancy Status value
	 */

	public void setPregnancyStatus(PregnancyStatusEnum _pregnancyStatus) {
		pregnancyStatus = _pregnancyStatus;
		pregnancyEvent();
	}

	public String getName() {
		if (name == null) {
			return "Adult " + getUID();
		} else {
			return name;
		}
	}
}

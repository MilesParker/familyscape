package edu.brook;

/**
 * Player Java Implementation.
 * 
 * Generated by metaabm system: Jul 10, 2009 6:08:10 PM PDT in project: edu.brook.parent.escape  */

public class Player extends org.ascape.model.CellOccupant {

	/**
	 * 
	 */

	private boolean cooperate = false;
	/**
	 * 
	 */

	private int age = 0;
	/**
	 * 
	 */

	private int wealth = 0;
	/**
	 * Constructs a new Player.
	 */

	public Player() {
		createUniqueID();
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		//uniqueID = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			Player clone = (Player) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	public DemographicPrisonersDilemma getDemographicPrisoner_sDilemma() {
		return (DemographicPrisonersDilemma) getScape().getRoot();
	}

	/**
	 * .
	 */

	public void intializeNonFramework() {

		setWealth(getDemographicPrisoner_sDilemma().getInitialWealth());
		int randomToMaxAge = randomToLimit(getDemographicPrisoner_sDilemma()
				.getMaximumAge());

		boolean randomStrategy = getRandom().nextBoolean();

		setAge(randomToMaxAge);

		setCooperate(randomStrategy);

	}
	/**
	 * .
	 */

	public void moveToRandomLocation() {

		{

			PlayCell randomCell2 = (PlayCell) ((org.ascape.model.space.Discrete) getDemographicPrisoner_sDilemma()
					.getGameSpace().getSpace()).findRandomAvailable();
			if (randomCell2 != null) {

				moveTo(randomCell2);

			}

		}

	}

	/**
	 * .
	 */

	public void randomWalk() {

		{

			PlayCell randomNeighbor = (PlayCell) ((org.ascape.model.space.Discrete) getDemographicPrisoner_sDilemma()
					.getGameSpace().getSpace())
					.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
							.getHostCell());
			if (randomNeighbor != null) {

				moveTo(randomNeighbor);

			}

		}

	}
	/**
	 * .
	 */

	public void playNeighbor() {

		{
			org.ascape.util.Conditional otherPlayerCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object otherPlayerCell) {
					if (otherPlayerCell instanceof Player) {
						Player otherPlayer = (Player) otherPlayerCell;
						return true;
					} else {
						return false;
					}
				}
			};

			Player otherPlayer = (Player) ((org.ascape.model.space.Discrete) getDemographicPrisoner_sDilemma()
					.getGameSpace().getSpace()).findRandomNeighbor(this,
					otherPlayerCondition);
			if (otherPlayer != null) {

				if ((otherPlayer.isCooperate() && isCooperate())) {

					int valueWealthAddPayoffCooperateCooperate = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffCC();

					int valueWealthAddPayoffCooperateCooperateCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffCC();

					setWealth(valueWealthAddPayoffCooperateCooperate);

					otherPlayer
							.setWealth(valueWealthAddPayoffCooperateCooperateCopy);

				}

				if ((otherPlayer.isCooperate() && !isCooperate())) {

					int valueWealthAddPayoffDefectCooperate = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffDC();

					int valueWealthAddPayoffCooperateDefectCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffCD();

					setWealth(valueWealthAddPayoffDefectCooperate);

					otherPlayer
							.setWealth(valueWealthAddPayoffCooperateDefectCopy);

				}

				if ((!otherPlayer.isCooperate() && isCooperate())) {

					int valueWealthAddPayoffCooperateDefect = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffCD();

					int valueWealthAddPayoffDefectCooperateCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffDC();

					setWealth(valueWealthAddPayoffCooperateDefect);

					otherPlayer
							.setWealth(valueWealthAddPayoffDefectCooperateCopy);

				}

				if ((!isCooperate() && !otherPlayer.isCooperate())) {

					int valueWealthAddPayoffDefectDefect = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffDD();

					int valueWealthAddPayoffDefectDefectCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffDD();

					setWealth(valueWealthAddPayoffDefectDefect);

					otherPlayer.setWealth(valueWealthAddPayoffDefectDefectCopy);

				}

			}

		}

	}
	/**
	 * Increment the Age by One..
	 */

	public void updateAge() {

		int incrementAge = getAge() + 1;

		setAge(incrementAge);

	}

	/**
	 * .
	 */

	public void fissionRule() {

		if (getWealth() >= getDemographicPrisoner_sDilemma().getFissionWealth()) {

			{

				PlayCell birthLocation = (PlayCell) ((org.ascape.model.space.Discrete) getDemographicPrisoner_sDilemma()
						.getGameSpace().getSpace())
						.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
								.getHostCell());
				if (birthLocation != null) {

					Player createAgents = (Player) getDemographicPrisoner_sDilemma()
							.getPlayer().getSpace().newLocation(false);
					createAgents.moveTo(birthLocation);
					createAgents.setWealth(getDemographicPrisoner_sDilemma()
							.getInheiritedWealth());
					double valueRandomUnit = getRandom().nextDouble();

					int wealthChildWealth = getWealth()
							- createAgents.getDemographicPrisoner_sDilemma()
									.getInheiritedWealth();

					if (valueRandomUnit < createAgents
							.getDemographicPrisoner_sDilemma()
							.getMutationRate()) {

						boolean valueRandomBoolean = getRandom().nextBoolean();

						createAgents.setCooperate(valueRandomBoolean);

					}

					if (!(valueRandomUnit < createAgents
							.getDemographicPrisoner_sDilemma()
							.getMutationRate())) {

						createAgents.setCooperate(isCooperate());

					}

					setWealth(wealthChildWealth);

				}

			}

		}

	}
	/**
	 * .
	 */

	public void dieAtAge() {

		if (getAge() > getDemographicPrisoner_sDilemma().getDeathAge()) {

			die();

		}

	}
	/**
	 * .
	 */

	public void dieAtWealth0() {

		if (getWealth() < 0) {

			die();

		}

	}

	/**
	 * Gets the Cooperate property for Player.
	 * @return 
	 */

	public boolean isCooperate() {
		return cooperate;
	}

	/**
	 * Sets the Cooperate property for Player.
	 * 
	 * @param _cooperate the new Cooperate value
	 */

	public void setCooperate(boolean _cooperate) {
		cooperate = _cooperate;
	}
	/**
	 * Gets the Age property for Player.
	 * @return 
	 */

	public int getAge() {
		return age;
	}

	/**
	 * Sets the Age property for Player.
	 * 
	 * @param _age the new Age value
	 */

	public void setAge(int _age) {
		age = _age;
	}
	/**
	 * Gets the Wealth property for Player.
	 * @return 
	 */

	public int getWealth() {
		return wealth;
	}

	/**
	 * Sets the Wealth property for Player.
	 * 
	 * @param _wealth the new Wealth value
	 */

	public void setWealth(int _wealth) {
		wealth = _wealth;
	}

	public String getName() {
		if (name == null) {
			return "Player " + uniqueID;
		} else {
			return name;
		}
	}
}
